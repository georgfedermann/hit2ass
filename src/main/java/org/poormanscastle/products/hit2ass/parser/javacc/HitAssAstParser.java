/* HitAssAstParser.java */
/* Generated By:JavaCC: Do not edit this line. HitAssAstParser.java */
package org.poormanscastle.products.hit2ass.parser.javacc;

import org.poormanscastle.products.hit2ass.ast.domain.*;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

public class HitAssAstParser implements HitAssAstParserConstants {
    private final static Logger logger = Logger.getLogger(HitAssAstParser.class);
    public static void main(String[] args){
        logger.info(StringUtils.join("Running parser with encoding hit2ass.clou.encoding=",
            System.getProperty("hit2ass.clou.encoding")));
        HitAssAstParser parser = new HitAssAstParser(System.in, System.getProperty("hit2ass.clou.encoding"));
    }

/*  Productions */
/*  CLOU Baustein CB */
  final public ClouBaustein CB() throws ParseException {ClouBausteinElement clouBausteinElement;
    jj_consume_token(CLOU_OPENER);
    clouBausteinElement = CBE();
    jj_consume_token(0);
{if ("" != null) return clouBausteinElement != null ?
            new ClouBausteinImpl(clouBausteinElement) :
            new ClouBausteinImpl(CodePosition.createZeroPosition(), null );}
    throw new Error("Missing return statement in function");
  }

  final public ClouBausteinElementList CBE() throws ParseException {ClouBausteinElement element; ClouBausteinElementList elementList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case WS:
    case FS:
    case SS:
    case MS:
    case HC:
    case GS:
    case JS:
    case ZS:
    case GD:
    case LD:
    case LIST:
    case DUMP:
    case AS:
    case IB:
    case OF:
    case DV:
    case PS:
    case SK:
    case FIXED_TEXT:{
      element = CBES();
      elementList = CBE();
{if ("" != null) return elementList == null ?
                new LastClouBausteinElementList(element) :
                new PairClouBausteinElementList(element, elementList);}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public ClouBausteinElement CBES() throws ParseException {ClouBausteinElement element;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      element = IF();
{if ("" != null) return element;}
      break;
      }
    case FS:{
      element = FOR();
{if ("" != null) return element;}
      break;
      }
    case WS:{
      element = WS();
{if ("" != null) return element;}
      break;
      }
    case SS:{
      element = SS();
{if ("" != null) return element;}
      break;
      }
    case MS:{
      element = MS();
{if ("" != null) return element;}
      break;
      }
    case HC:{
      element = HC();
{if ("" != null) return element;}
      break;
      }
    case GD:{
      element = GDS();
{if ("" != null) return element;}
      break;
      }
    case LD:{
      element = LDS();
{if ("" != null) return element;}
      break;
      }
    case AS:{
      element = AS();
{if ("" != null) return element;}
      break;
      }
    case IB:{
      element = IB();
{if ("" != null) return element;}
      break;
      }
    case GS:{
      element = GS();
{if ("" != null) return element;}
      break;
      }
    case JS:{
      element = JS();
{if ("" != null) return element;}
      break;
      }
    case ZS:{
      element = ZS();
{if ("" != null) return element;}
      break;
      }
    case FIXED_TEXT:{
      element = FX();
{if ("" != null) return element;}
      break;
      }
    case SK:{
      element = SK();
{if ("" != null) return element;}
      break;
      }
    case DUMP:{
      element = DUMP();
{if ("" != null) return element;}
      break;
      }
    case OF:{
      if (jj_2_1(4)) {
        element = OF();
{if ("" != null) return element;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OF:{
          element = CF();
{if ("" != null) return element;}
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    case LIST:{
      if (jj_2_3(3)) {
        element = GLDS();
{if ("" != null) return element;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LIST:{
          if (jj_2_2(3)) {
            element = LLDS();
{if ("" != null) return element;}
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LIST:{
              element = LCS();
{if ("" != null) return element;}
              break;
              }
            default:
              jj_la1[2] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    case DV:{
      element = DV();
{if ("" != null) return element;}
      break;
      }
    case PS:{
      element = PS();
{if ("" != null) return element;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ForStatement FOR() throws ParseException {Expression repetitionCount; ClouBausteinElement forBody;
    jj_consume_token(FS);
    repetitionCount = E();
    forBody = CBE();
    jj_consume_token(ENDIF);
{if ("" != null) return new ForStatement(repetitionCount, forBody);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalStatement IF() throws ParseException {Expression condition; ClouBausteinElement thenElement; ClouBausteinElement elseElement;
    jj_consume_token(IF);
    condition = E();
    jj_consume_token(IF_COLON);
    thenElement = THEN();
    elseElement = ELSE();
    jj_consume_token(ENDIF);
{if ("" != null) return new ConditionalStatement(condition, thenElement, elseElement);}
    throw new Error("Missing return statement in function");
  }

  final public ClouBausteinElement THEN() throws ParseException {ClouBausteinElement thenStatement;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case THEN:{
      jj_consume_token(THEN);
      thenStatement = CBE();
{if ("" != null) return thenStatement;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public ClouBausteinElement ELSE() throws ParseException {ClouBausteinElement elseStatement;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      elseStatement = CBE();
{if ("" != null) return elseStatement;}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public WhileStatement WS() throws ParseException {Token whileToken; Expression condition; ClouBausteinElement whileBody;
    whileToken = jj_consume_token(WS);
    condition = E();
    jj_consume_token(IF_COLON);
    whileBody = CBE();
    jj_consume_token(ENDIF);
{if ("" != null) return new WhileStatement(CodePosition.createFromToken(whileToken), condition, whileBody);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchStatement SS() throws ParseException {Expression expression; CaseStatementList caseStatementList;
    jj_consume_token(SS);
    expression = E();
    caseStatementList = SSPrime();
    jj_consume_token(ENDIF);
{if ("" != null) return new SwitchStatement(expression, caseStatementList);}
    throw new Error("Missing return statement in function");
  }

  final public ShellCommand SK() throws ParseException {Token cmdToken;
    jj_consume_token(SK);
    cmdToken = jj_consume_token(SK_VAR_ID);
{if ("" != null) return new ShellCommand(CodePosition.createFromToken(cmdToken), cmdToken.image);}
    throw new Error("Missing return statement in function");
  }

  final public CaseStatementList SSPrime() throws ParseException {CaseStatementList caseStatementList; CaseStatement caseStatement;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CA:{
      caseStatement = CASE();
      caseStatementList = SSPrime();
{if ("" != null) return caseStatementList == null ? new LastCaseStatementList(caseStatement) :
            new PairCaseStatementList(caseStatement, caseStatementList);}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public CaseStatement CASE() throws ParseException {Token matchToken; ClouBausteinElement clouBausteinElement;
    matchToken = jj_consume_token(CA);
    clouBausteinElement = CBE();
{if ("" != null) return new CaseStatementImpl(CodePosition.createFromToken(matchToken), matchToken.image, clouBausteinElement);}
    throw new Error("Missing return statement in function");
  }

  final public MacroCallStatement MS() throws ParseException {Token idToken; ExpressionList argumentList;
    jj_consume_token(MS);
    idToken = jj_consume_token(MS_ID);
    argumentList = AL();
{if ("" != null) return new MacroCallStatement(CodePosition.createFromToken(idToken), idToken.image, argumentList);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList AL() throws ParseException {ExpressionList expressionList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MS_LPAREN:
    case IF_LPAREN:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MS_LPAREN:{
        jj_consume_token(MS_LPAREN);
        break;
        }
      case IF_LPAREN:{
        jj_consume_token(IF_LPAREN);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expressionList = EL();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MS_RPAREN:{
        jj_consume_token(MS_RPAREN);
        break;
        }
      case IF_RPAREN:{
        jj_consume_token(IF_RPAREN);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return expressionList;}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList EL() throws ParseException {Expression expression; ExpressionList expressionList;
    expression = E();
    expressionList = ELPrime();
{if ("" != null) return expressionList == null ? new LastExpressionList(expression) : new PairExpressionList(expression, expressionList);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList ELPrime() throws ParseException {Expression expression; ExpressionList expressionList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MS_COMMA:
    case LS_BRACES_COMMA:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MS_COMMA:{
        jj_consume_token(MS_COMMA);
        break;
        }
      case LS_BRACES_COMMA:{
        jj_consume_token(LS_BRACES_COMMA);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression = E();
      expressionList = ELPrime();
{if ("" != null) return expressionList == null ? new LastExpressionList(expression) : new PairExpressionList(expression, expressionList);}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public IncludeBausteinStatement IB() throws ParseException {Token pathToken;
    jj_consume_token(IB);
    pathToken = jj_consume_token(IB_TEXT);
{if ("" != null) return new IncludeBausteinStatement(CodePosition.createFromToken(pathToken), pathToken.image);}
    throw new Error("Missing return statement in function");
  }

  final public HitCommandStatement HC() throws ParseException {Expression repetitorExpression = null; Token hitCommandNameToken; Token hcToken; Token verstarkerToken = null;
    hcToken = jj_consume_token(HC);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HC_HC:{
      verstarkerToken = jj_consume_token(HC_HC);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    repetitorExpression = E();
    hitCommandNameToken = jj_consume_token(HC_NAME);
String command = hitCommandNameToken.image.replaceAll("\u005c"", "").replaceAll("\u00c4", "AE").replaceAll("\u00d6", "OE").replaceAll("\u00dc", "UE").replaceAll("[^A-Z:]", "_");
        String[] commandSplit = command.split(":");
        if(commandSplit.length ==2) command = commandSplit[1];
        HitCommandStatement hcStatement = new HitCommandStatement(CodePosition.createFromToken(hcToken),
            HitCommand.valueOf(command), repetitorExpression);
        if(verstarkerToken != null || commandSplit.length == 2) hcStatement.verstarken();
        {if ("" != null) return hcStatement;}
    throw new Error("Missing return statement in function");
  }

  final public WriteStatement DUMP() throws ParseException {Token filenameToken;
    jj_consume_token(DUMP);
    filenameToken = jj_consume_token(DUMP_TEXT);
{if ("" != null) return new WriteStatement(CodePosition.createFromToken(filenameToken), filenameToken.image);}
    throw new Error("Missing return statement in function");
  }

  final public OpenFileCommand OF() throws ParseException {Token fileNameToken;
    jj_consume_token(OF);
    fileNameToken = jj_consume_token(FILE_TEXT);
    jj_consume_token(FILE_OPEN);
    jj_consume_token(FILE_READ);
{if ("" != null) return new OpenFileCommand(CodePosition.createFromToken(fileNameToken), fileNameToken.image);}
    throw new Error("Missing return statement in function");
  }

  final public CloseFileCommand CF() throws ParseException {Token fileNameToken;
    jj_consume_token(OF);
    fileNameToken = jj_consume_token(FILE_TEXT);
    jj_consume_token(FILE_CLOSE);
{if ("" != null) return new CloseFileCommand(CodePosition.createFromToken(fileNameToken), fileNameToken.image);}
    throw new Error("Missing return statement in function");
  }

  final public DynamicValue DV() throws ParseException {Token idToken;
    jj_consume_token(DV);
    idToken = jj_consume_token(DV_ID);
logger.debug(StringUtils.join("Found DynamicValue: varId:", idToken.image));
        {if ("" != null) return new DynamicValue(CodePosition.createFromToken(idToken), idToken.image);}
    throw new Error("Missing return statement in function");
  }

  final public PrintStatement PS() throws ParseException {Token idToken;
    jj_consume_token(PS);
    idToken = jj_consume_token(PS_ID);
{if ("" != null) return new PrintStatement(CodePosition.createFromToken(idToken), idToken.image);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentStatement AS() throws ParseException {Token idToken; Expression expression;
    jj_consume_token(AS);
    idToken = jj_consume_token(AS_ID);
    expression = E();
logger.debug(StringUtils.join("Found AssignmentStatement: varId:", idToken.image, "; Expression: ", expression));
        {if ("" != null) return new AssignmentStatement(idToken.image, expression);}
    throw new Error("Missing return statement in function");
  }

  final public GlobalDeclarationStatement GDS() throws ParseException {Token idToken; Expression expression; String formatDefinition;
    jj_consume_token(GD);
    idToken = jj_consume_token(DS_ID);
    expression = E();
    formatDefinition = DSPrime();
{if ("" != null) return new GlobalDeclarationStatement(idToken.image, expression, formatDefinition);}
    throw new Error("Missing return statement in function");
  }

  final public String DSPrime() throws ParseException {Token formatToken;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DS_TEXT:{
      formatToken = jj_consume_token(DS_TEXT);
{if ("" != null) return formatToken.image;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
{if ("" != null) return "";}
    throw new Error("Missing return statement in function");
  }

  final public LocalDeclarationStatement LDS() throws ParseException {Token idToken; Expression expression; String formatDefinition;
    jj_consume_token(LD);
    idToken = jj_consume_token(DS_ID);
    expression = E();
    formatDefinition = DSPrime();
{if ("" != null) return new LocalDeclarationStatement(idToken.image, expression, formatDefinition);}
    throw new Error("Missing return statement in function");
  }

  final public GlobalListDeclarationStatement GLDS() throws ParseException {Token varIdToken; Expression listExpression;
    jj_consume_token(LIST);
    varIdToken = jj_consume_token(LS_ID);
    jj_consume_token(LS_GD);
    listExpression = E();
{if ("" != null) return new GlobalListDeclarationStatement(CodePosition.createFromToken(varIdToken), varIdToken.image, listExpression);}
    throw new Error("Missing return statement in function");
  }

  final public LocalListDeclarationStatement LLDS() throws ParseException {Token varIdToken; Expression listExpression;
    jj_consume_token(LIST);
    varIdToken = jj_consume_token(LS_ID);
    jj_consume_token(LS_LD);
    listExpression = E();
{if ("" != null) return new LocalListDeclarationStatement(CodePosition.createFromToken(varIdToken), varIdToken.image, listExpression);}
    throw new Error("Missing return statement in function");
  }

  final public ListConcatenationStatement LCS() throws ParseException {Token varIdToken; Expression listExpression;
    jj_consume_token(LIST);
    varIdToken = jj_consume_token(LS_ID);
    jj_consume_token(LS_AMPERSAND);
    listExpression = E();
{if ("" != null) return new ListConcatenationStatement(CodePosition.createFromToken(varIdToken), varIdToken.image, listExpression);}
    throw new Error("Missing return statement in function");
  }

  final public GStatement GS() throws ParseException {Expression colExpr, valExpr;
    jj_consume_token(GS);
    colExpr = E();
    valExpr = E();
{if ("" != null) return new GStatement(colExpr.getCodePosition(), colExpr, valExpr);}
    throw new Error("Missing return statement in function");
  }

  final public JStatement JS() throws ParseException {Expression colExpr, rowExpr;
    jj_consume_token(JS);
    colExpr = E();
    rowExpr = E();
{if ("" != null) return new JStatement(colExpr.getCodePosition(), colExpr, rowExpr);}
    throw new Error("Missing return statement in function");
  }

  final public ZStatement ZS() throws ParseException {Expression colExpr, rowExpr;
    jj_consume_token(ZS);
    colExpr = E();
    rowExpr = E();
{if ("" != null) return new ZStatement(colExpr.getCodePosition(), colExpr, rowExpr);}
    throw new Error("Missing return statement in function");
  }

  final public Expression E() throws ParseException {Expression lhs, rhs;
    if (jj_2_4(2)) {
      lhs = T8();
      rhs = EPrime(lhs);
{if ("" != null) return rhs == null ? lhs : rhs;}
    } else {
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EPrime(Expression lhs) throws ParseException {Expression rhs; Expression ePrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF_OR:
    case DS_OR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_OR:{
        jj_consume_token(IF_OR);
        break;
        }
      case DS_OR:{
        jj_consume_token(DS_OR);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rhs = T8();
      ePrimeExpression = EPrime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.OR,
                ePrimeExpression != null ? ePrimeExpression : rhs );}
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T8() throws ParseException {Expression lhs, rhs;
    lhs = T7();
    rhs = T8Prime(lhs);
{if ("" != null) return rhs == null ? lhs : rhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T8Prime(Expression lhs) throws ParseException {Expression rhs, t8PrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF_AND:
    case DS_AND:
    case LS_AMPERSAND:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_AND:{
        jj_consume_token(IF_AND);
        break;
        }
      case DS_AND:{
        jj_consume_token(DS_AND);
        break;
        }
      case LS_AMPERSAND:{
        jj_consume_token(LS_AMPERSAND);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rhs = T7();
      t8PrimeExpression = T8Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.AND,
                t8PrimeExpression != null ? t8PrimeExpression : rhs );}
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T7() throws ParseException {Expression lhs, rhs;
    lhs = T6();
    rhs = T7Prime(lhs);
{if ("" != null) return rhs != null ? rhs : lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T7Prime(Expression lhs) throws ParseException {Expression rhs, t7PrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF_XOR:
    case FOR_XOR:
    case DS_XOR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_XOR:{
        jj_consume_token(IF_XOR);
        break;
        }
      case DS_XOR:{
        jj_consume_token(DS_XOR);
        break;
        }
      case FOR_XOR:{
        jj_consume_token(FOR_XOR);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rhs = T6();
      t7PrimeExpression = T7Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.XOR,
                t7PrimeExpression != null ? t7PrimeExpression : rhs );}
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T6() throws ParseException {Expression lhs, rhs;
    lhs = T5();
    rhs = T6Prime(lhs);
{if ("" != null) return rhs != null ? rhs : lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T6Prime(Expression lhs) throws ParseException {Expression rhs, t6PrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF_EQ:
    case IF_EQ_STRICT:
    case IF_NEQ:
    case FOR_EQ_STRICT:
    case FOR_NEQ:
    case DS_EQ:
    case DS_EQ_STRICT:
    case DS_NEQ:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_EQ:
      case IF_EQ_STRICT:
      case FOR_EQ_STRICT:
      case DS_EQ:
      case DS_EQ_STRICT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF_EQ:{
          jj_consume_token(IF_EQ);
          break;
          }
        case DS_EQ:{
          jj_consume_token(DS_EQ);
          break;
          }
        case IF_EQ_STRICT:{
          jj_consume_token(IF_EQ_STRICT);
          break;
          }
        case DS_EQ_STRICT:{
          jj_consume_token(DS_EQ_STRICT);
          break;
          }
        case FOR_EQ_STRICT:{
          jj_consume_token(FOR_EQ_STRICT);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = T5();
        t6PrimeExpression = T6Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.EQ,
                t6PrimeExpression != null ? t6PrimeExpression : rhs );}
        break;
        }
      case IF_NEQ:
      case FOR_NEQ:
      case DS_NEQ:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF_NEQ:{
          jj_consume_token(IF_NEQ);
          break;
          }
        case DS_NEQ:{
          jj_consume_token(DS_NEQ);
          break;
          }
        case FOR_NEQ:{
          jj_consume_token(FOR_NEQ);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = T5();
        t6PrimeExpression = T6Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.NEQ,
                t6PrimeExpression != null ? t6PrimeExpression : rhs);}
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T5() throws ParseException {Expression lhs, rhs;
    lhs = T4();
    rhs = T5Prime(lhs);
{if ("" != null) return rhs != null ? rhs : lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T5Prime(Expression lhs) throws ParseException {Expression rhs, t5PrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF_LT:
    case IF_LTE:
    case IF_GT:
    case IF_GTE:
    case FOR_LT:
    case FOR_LTE:
    case FOR_GT:
    case FOR_GTE:
    case DS_LT:
    case DS_LTE:
    case DS_GT:
    case DS_GTE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_LT:
      case FOR_LT:
      case DS_LT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF_LT:{
          jj_consume_token(IF_LT);
          break;
          }
        case DS_LT:{
          jj_consume_token(DS_LT);
          break;
          }
        case FOR_LT:{
          jj_consume_token(FOR_LT);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = T4();
        t5PrimeExpression = T5Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.LT,
                t5PrimeExpression != null ? t5PrimeExpression : rhs );}
        break;
        }
      case IF_LTE:
      case FOR_LTE:
      case DS_LTE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF_LTE:{
          jj_consume_token(IF_LTE);
          break;
          }
        case DS_LTE:{
          jj_consume_token(DS_LTE);
          break;
          }
        case FOR_LTE:{
          jj_consume_token(FOR_LTE);
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = T4();
        t5PrimeExpression = T5Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.LTE,
                t5PrimeExpression != null ? t5PrimeExpression : rhs );}
        break;
        }
      case IF_GT:
      case FOR_GT:
      case DS_GT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF_GT:{
          jj_consume_token(IF_GT);
          break;
          }
        case DS_GT:{
          jj_consume_token(DS_GT);
          break;
          }
        case FOR_GT:{
          jj_consume_token(FOR_GT);
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = T4();
        t5PrimeExpression = T5Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.GT,
                t5PrimeExpression != null ? t5PrimeExpression : rhs );}
        break;
        }
      case IF_GTE:
      case FOR_GTE:
      case DS_GTE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF_GTE:{
          jj_consume_token(IF_GTE);
          break;
          }
        case DS_GTE:{
          jj_consume_token(DS_GTE);
          break;
          }
        case FOR_GTE:{
          jj_consume_token(FOR_GTE);
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = T4();
        t5PrimeExpression = T5Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.GTE,
                t5PrimeExpression != null ? t5PrimeExpression : rhs );}
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T4() throws ParseException {Expression lhs, rhs;
    lhs = T3();
    rhs = T4Prime(lhs);
{if ("" != null) return rhs != null ? rhs : lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T4Prime(Expression lhs) throws ParseException {Expression rhs, t4PrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF_PLUS:
    case IF_MINUS:
    case FOR_PLUS:
    case FOR_MINUS:
    case DS_STRING_CONCAT:
    case DS_PLUS:
    case DS_MINUS:
    case AS_STRING_CONCAT:
    case AS_PLUS:
    case AS_MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_PLUS:
      case FOR_PLUS:
      case DS_PLUS:
      case AS_PLUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF_PLUS:{
          jj_consume_token(IF_PLUS);
          break;
          }
        case DS_PLUS:{
          jj_consume_token(DS_PLUS);
          break;
          }
        case AS_PLUS:{
          jj_consume_token(AS_PLUS);
          break;
          }
        case FOR_PLUS:{
          jj_consume_token(FOR_PLUS);
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = T3();
        t4PrimeExpression = T4Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.PLUS,
                t4PrimeExpression != null ? t4PrimeExpression : rhs );}
        break;
        }
      case IF_MINUS:
      case FOR_MINUS:
      case DS_MINUS:
      case AS_MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF_MINUS:{
          jj_consume_token(IF_MINUS);
          break;
          }
        case DS_MINUS:{
          jj_consume_token(DS_MINUS);
          break;
          }
        case AS_MINUS:{
          jj_consume_token(AS_MINUS);
          break;
          }
        case FOR_MINUS:{
          jj_consume_token(FOR_MINUS);
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = T3();
        t4PrimeExpression = T4Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.MINUS,
                t4PrimeExpression != null ? t4PrimeExpression : rhs );}
        break;
        }
      case DS_STRING_CONCAT:
      case AS_STRING_CONCAT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DS_STRING_CONCAT:{
          jj_consume_token(DS_STRING_CONCAT);
          break;
          }
        case AS_STRING_CONCAT:{
          jj_consume_token(AS_STRING_CONCAT);
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = T3();
        t4PrimeExpression = T4Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.STRING_CONCAT, t4PrimeExpression != null ? t4PrimeExpression : rhs);}
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T3() throws ParseException {Expression lhs, rhs;
    lhs = T2();
    rhs = T3Prime(lhs);
{if ("" != null) return rhs != null ? rhs : lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T3Prime(Expression lhs) throws ParseException {Expression rhs, t3PrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF_TIMES:
    case IF_DIV:
    case FOR_TIMES:
    case FOR_DIV:
    case DS_TIMES:
    case DS_DIV:
    case AS_TIMES:
    case AS_DIV:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_TIMES:
      case FOR_TIMES:
      case DS_TIMES:
      case AS_TIMES:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF_TIMES:{
          jj_consume_token(IF_TIMES);
          break;
          }
        case DS_TIMES:{
          jj_consume_token(DS_TIMES);
          break;
          }
        case AS_TIMES:{
          jj_consume_token(AS_TIMES);
          break;
          }
        case FOR_TIMES:{
          jj_consume_token(FOR_TIMES);
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = T2();
        t3PrimeExpression = T3Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.TIMES,
                t3PrimeExpression != null ? t3PrimeExpression : rhs );}
        break;
        }
      case IF_DIV:
      case FOR_DIV:
      case DS_DIV:
      case AS_DIV:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF_DIV:{
          jj_consume_token(IF_DIV);
          break;
          }
        case DS_DIV:{
          jj_consume_token(DS_DIV);
          break;
          }
        case AS_DIV:{
          jj_consume_token(AS_DIV);
          break;
          }
        case FOR_DIV:{
          jj_consume_token(FOR_DIV);
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = T2();
        t3PrimeExpression = T3Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.DIV,
                t3PrimeExpression != null ? t3PrimeExpression : rhs );}
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T2() throws ParseException {Expression f;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SS_SHELLVAR:
    case SS_NUM:
    case SS_ID:
    case MS_NUM:
    case MS_DEC:
    case MS_ID:
    case MS_TEXT:
    case IF_SHELLVAR:
    case IF_NUM:
    case IF_DEC:
    case IF_ID:
    case IF_TEXT:
    case FOR_NUM:
    case FOR_DEC:
    case FOR_ID:
    case FOR_TEXT:
    case DS_NUM:
    case DS_DEC:
    case DS_ID:
    case DS_TEXT:
    case AS_SHELLVAR:
    case AS_NUM:
    case AS_DEC:
    case AS_ID:
    case AS_TEXT:
    case LS_LBRACE:
    case LS_ID:
    case LS_BRACES_NUM:
    case LS_BRACES_DEC:
    case LS_BRACES_ID:
    case LS_BRACES_TEXT:
    case HC_NUM:
    case HC_ID:{
      f = F();
{if ("" != null) return f;}
      break;
      }
    case IF_NOT:
    case FOR_NOT:
    case DS_NOT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_NOT:{
        jj_consume_token(IF_NOT);
        break;
        }
      case DS_NOT:{
        jj_consume_token(DS_NOT);
        break;
        }
      case FOR_NOT:{
        jj_consume_token(FOR_NOT);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f = F();
{if ("" != null) return new UnaryOperatorExpression(UnaryOperator.NOT, f);}
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression F() throws ParseException {Token valueToken; ExpressionList expressionList;
    // In case of array-like list expressions like dbklappe[1,5] provide
    // for integer valued index expressions
    Expression startIndexExpr = null, endIndexExpr = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SS_NUM:
    case MS_NUM:
    case IF_NUM:
    case FOR_NUM:
    case DS_NUM:
    case AS_NUM:
    case LS_BRACES_NUM:
    case HC_NUM:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_NUM:{
        valueToken = jj_consume_token(IF_NUM);
        break;
        }
      case DS_NUM:{
        valueToken = jj_consume_token(DS_NUM);
        break;
        }
      case AS_NUM:{
        valueToken = jj_consume_token(AS_NUM);
        break;
        }
      case MS_NUM:{
        valueToken = jj_consume_token(MS_NUM);
        break;
        }
      case LS_BRACES_NUM:{
        valueToken = jj_consume_token(LS_BRACES_NUM);
        break;
        }
      case SS_NUM:{
        valueToken = jj_consume_token(SS_NUM);
        break;
        }
      case HC_NUM:{
        valueToken = jj_consume_token(HC_NUM);
        break;
        }
      case FOR_NUM:{
        valueToken = jj_consume_token(FOR_NUM);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new NumExpression(CodePosition.createFromToken(valueToken), Integer.parseInt(valueToken.image));}
      break;
      }
    case MS_DEC:
    case IF_DEC:
    case FOR_DEC:
    case DS_DEC:
    case AS_DEC:
    case LS_BRACES_DEC:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_DEC:{
        valueToken = jj_consume_token(IF_DEC);
        break;
        }
      case DS_DEC:{
        valueToken = jj_consume_token(DS_DEC);
        break;
        }
      case AS_DEC:{
        valueToken = jj_consume_token(AS_DEC);
        break;
        }
      case MS_DEC:{
        valueToken = jj_consume_token(MS_DEC);
        break;
        }
      case LS_BRACES_DEC:{
        valueToken = jj_consume_token(LS_BRACES_DEC);
        break;
        }
      case FOR_DEC:{
        valueToken = jj_consume_token(FOR_DEC);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new DecimalExpression(CodePosition.createFromToken(valueToken), Double.parseDouble(valueToken.image));}
      break;
      }
    case MS_TEXT:
    case IF_TEXT:
    case FOR_TEXT:
    case DS_TEXT:
    case AS_TEXT:
    case LS_BRACES_TEXT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF_TEXT:{
        valueToken = jj_consume_token(IF_TEXT);
        break;
        }
      case DS_TEXT:{
        valueToken = jj_consume_token(DS_TEXT);
        break;
        }
      case AS_TEXT:{
        valueToken = jj_consume_token(AS_TEXT);
        break;
        }
      case MS_TEXT:{
        valueToken = jj_consume_token(MS_TEXT);
        break;
        }
      case LS_BRACES_TEXT:{
        valueToken = jj_consume_token(LS_BRACES_TEXT);
        break;
        }
      case FOR_TEXT:{
        valueToken = jj_consume_token(FOR_TEXT);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new TextExpression(CodePosition.createFromToken(valueToken), valueToken.image);}
      break;
      }
    case SS_SHELLVAR:
    case IF_SHELLVAR:
    case AS_SHELLVAR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SS_SHELLVAR:{
        jj_consume_token(SS_SHELLVAR);
        break;
        }
      case AS_SHELLVAR:{
        jj_consume_token(AS_SHELLVAR);
        break;
        }
      case IF_SHELLVAR:{
        jj_consume_token(IF_SHELLVAR);
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SS_LPAREN:{
        jj_consume_token(SS_LPAREN);
        break;
        }
      case AS_LPAREN:{
        jj_consume_token(AS_LPAREN);
        break;
        }
      case IF_LPAREN:{
        jj_consume_token(IF_LPAREN);
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SS_QUOTE:{
        jj_consume_token(SS_QUOTE);
        valueToken = jj_consume_token(SS_SHELLVAR_ID);
        jj_consume_token(SS_QUOTE);
        break;
        }
      case AS_TEXT:{
        valueToken = jj_consume_token(AS_TEXT);
        break;
        }
      case IF_TEXT:{
        valueToken = jj_consume_token(IF_TEXT);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SS_RPAREN:{
        jj_consume_token(SS_RPAREN);
        break;
        }
      case AS_RPAREN:{
        jj_consume_token(AS_RPAREN);
        break;
        }
      case IF_RPAREN:{
        jj_consume_token(IF_RPAREN);
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
// TODO 2016-07-08 I vote to delete this since SHELLVARIABLE in fact is a function call and has to be handled there
        // ShellVariable evaluations in assignment statements #=
        // deliver the variableId with quotes. They have to be truncated
        // before storage
        {if ("" != null) return new ShellVariableExpression(CodePosition.createFromToken(valueToken), valueToken.image.replaceAll("\u005c"", ""));}
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      if (jj_2_5(2)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF_ID:{
          valueToken = jj_consume_token(IF_ID);
          break;
          }
        case AS_ID:{
          valueToken = jj_consume_token(AS_ID);
          break;
          }
        case FOR_ID:{
          valueToken = jj_consume_token(FOR_ID);
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF_LPAREN:{
          jj_consume_token(IF_LPAREN);
          break;
          }
        case AS_LPAREN:{
          jj_consume_token(AS_LPAREN);
          break;
          }
        case FOR_LPAREN:{
          jj_consume_token(FOR_LPAREN);
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expressionList = EL();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF_RPAREN:{
          jj_consume_token(IF_RPAREN);
          break;
          }
        case AS_RPAREN:{
          jj_consume_token(AS_RPAREN);
          break;
          }
        case FOR_RPAREN:{
          jj_consume_token(FOR_RPAREN);
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
{if ("" != null) return new ClouFunctionCall(CodePosition.createFromToken(valueToken), valueToken.image, expressionList);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SS_ID:
        case MS_ID:
        case IF_ID:
        case FOR_ID:
        case DS_ID:
        case AS_ID:
        case LS_ID:
        case LS_BRACES_ID:
        case HC_ID:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF_ID:{
            valueToken = jj_consume_token(IF_ID);
            break;
            }
          case DS_ID:{
            valueToken = jj_consume_token(DS_ID);
            break;
            }
          case SS_ID:{
            valueToken = jj_consume_token(SS_ID);
            break;
            }
          case AS_ID:{
            valueToken = jj_consume_token(AS_ID);
            break;
            }
          case MS_ID:{
            valueToken = jj_consume_token(MS_ID);
            break;
            }
          case LS_ID:{
            valueToken = jj_consume_token(LS_ID);
            break;
            }
          case LS_BRACES_ID:{
            valueToken = jj_consume_token(LS_BRACES_ID);
            break;
            }
          case HC_ID:{
            valueToken = jj_consume_token(HC_ID);
            break;
            }
          case FOR_ID:{
            valueToken = jj_consume_token(FOR_ID);
            break;
            }
          default:
            jj_la1[52] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
{if ("" != null) return new IdExpression(CodePosition.createFromToken(valueToken), valueToken.image);}
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          if (jj_2_6(2)) {
            jj_consume_token(LS_LBRACE);
            jj_consume_token(LS_BRACES_RBRACE);
{if ("" != null) return null;}
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LS_LBRACE:{
              jj_consume_token(LS_LBRACE);
              expressionList = EL();
              jj_consume_token(LS_BRACES_RBRACE);
{if ("" != null) return expressionList;}
              break;
              }
            default:
              jj_la1[55] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FixedText FX() throws ParseException {Token valueToken;
    valueToken = jj_consume_token(FIXED_TEXT);
{if ("" != null) return FixedText.create(CodePosition.createFromToken(valueToken), valueToken.image);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(LS_LBRACE)) return true;
    if (jj_scan_token(LS_BRACES_RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_3R_12()) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(180)) {
    jj_scanpos = xsp;
    if (jj_scan_token(210)) return true;
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(191)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(224)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(234)) {
    jj_scanpos = xsp;
    if (jj_scan_token(250)) {
    jj_scanpos = xsp;
    if (jj_scan_token(258)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_1()
 {
    if (jj_scan_token(OF)) return true;
    if (jj_scan_token(FILE_TEXT)) return true;
    if (jj_scan_token(FILE_OPEN)) return true;
    if (jj_scan_token(FILE_READ)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(182)) {
    jj_scanpos = xsp;
    if (jj_scan_token(212)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(224)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(217)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(181)) {
    jj_scanpos = xsp;
    if (jj_scan_token(211)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_2()
 {
    if (jj_scan_token(LIST)) return true;
    if (jj_scan_token(LS_ID)) return true;
    if (jj_scan_token(LS_LD)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(197)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(217)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_6()
 {
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_3()
 {
    if (jj_scan_token(LIST)) return true;
    if (jj_scan_token(LS_ID)) return true;
    if (jj_scan_token(LS_GD)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(192)) {
    jj_scanpos = xsp;
    if (jj_scan_token(225)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(251)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_scan_token(230)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(190)) {
    jj_scanpos = xsp;
    if (jj_scan_token(222)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(249)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(179)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(189)) {
    jj_scanpos = xsp;
    if (jj_scan_token(221)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(248)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(257)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(178)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_4()
 {
    if (jj_3R_6()) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(246)) return true;
    }
    return false;
  }

  private boolean jj_3R_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(177)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) return true;
    }
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(174)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) return true;
    }
    }
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_46()) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_4()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(184)) {
    jj_scanpos = xsp;
    if (jj_scan_token(214)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(183)) {
    jj_scanpos = xsp;
    if (jj_scan_token(213)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(LS_LBRACE)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(LS_BRACES_RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public HitAssAstParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[56];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
      jj_la1_init_7();
      jj_la1_init_8();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffdc200,0x20000000,0x2000000,0x2000000,0xfffdc200,0x400,0x800,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x602,0x200,0x0,0x0,0x2,0x4,0x10,0x8,0x0,0x0,0x0,0x400,0x202,0x400,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000010,0x40000020,0x20000010,0x40,0x40,0x0,0x0,0x4000,0x4000,0x8000,0x8000,0x10000,0x10000,0x3000,0x40000,0x43000,0x43000,0x80000,0x100000,0x200000,0x400000,0x780000,0x780000,0x800000,0x1000000,0x0,0x1800000,0x1800000,0x2000000,0x4000000,0x6000000,0x6000000,0x20000,0x80020f80,0x80000080,0x100,0x400,0x800,0x20000000,0x0,0x40000000,0x0,0x20000000,0x40000000,0x200,0x80000d80,0x200,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x1000,0x20000,0x21000,0x21000,0x40000,0x80000,0x100000,0x200000,0x3c0000,0x3c0000,0x400000,0x800000,0x0,0xc00000,0xc00000,0x1000000,0x2000000,0x3000000,0x3000000,0x10000,0x40010034,0x40000000,0x4,0x20,0x0,0x0,0x20,0x0,0x10,0x10000000,0x20000000,0x10,0x40000024,0x10,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x1000,0x1000,0x2000,0x2000,0x600,0x8000,0x8600,0x8600,0x10000,0x20000,0x40000,0x80000,0xf0000,0xf0000,0x200000,0x400000,0x100000,0x700000,0x700000,0x800000,0x1000000,0x1800000,0x1800000,0x4000,0xe000401a,0x20000000,0x40000002,0x10,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x80000008,0x60000012,0x80000008,0x0,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x100000,0x40000,0x1c0000,0x1c0000,0x200000,0x400000,0x600000,0x600000,0x0,0x60000021,0x20000000,0x40000000,0x1,0x20,0x2000000,0x0,0x4000000,0x0,0x2000000,0x4000000,0x0,0x60000021,0x0,0x0,};
   }
   private static void jj_la1_init_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf000483,0x1000000,0x2000000,0x8000002,0x0,0x0,0x2,0x0,0x1,0x0,0x0,0x4000401,0xb000002,0x4000401,0x80,};
   }
   private static void jj_la1_init_8() {
      jj_la1_8 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x2,0x4,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HitAssAstParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HitAssAstParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HitAssAstParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HitAssAstParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HitAssAstParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HitAssAstParser(HitAssAstParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HitAssAstParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[264];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 56; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 264; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
