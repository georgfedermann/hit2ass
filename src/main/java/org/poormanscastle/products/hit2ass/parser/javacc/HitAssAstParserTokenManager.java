/* HitAssAstParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. HitAssAstParserTokenManager.java */
package org.poormanscastle.products.hit2ass.parser.javacc;
import org.poormanscastle.products.hit2ass.ast.domain.*;
import org.poormanscastle.products.hit2ass.exceptions.*;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

/* Token Manager. */
@SuppressWarnings("unused")public class HitAssAstParserTokenManager implements HitAssAstParserConstants {

  /* Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /* Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_21(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_21(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   return jjMoveNfa_21(jjStopStringLiteralDfa_21(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_21(){
   switch(curChar)
   {
      case 38:
         return jjStopAtPos(0, 339);
      case 44:
         return jjStopAtPos(0, 340);
      case 91:
         return jjStopAtPos(0, 342);
      case 93:
         return jjStopAtPos(0, 343);
      case 125:
         return jjStopAtPos(0, 341);
      default :
         return jjMoveNfa_21(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_21(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 344)
                        kind = 344;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 345)
                     kind = 345;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 346)
                     kind = 346;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 8:
                  if (curChar == 34 && kind > 347)
                     kind = 347;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 344)
                     kind = 344;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 344)
                     kind = 344;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 345)
                     kind = 345;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if (curChar == 46)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 345)
                     kind = 345;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 346)
                     kind = 346;
                  { jjCheckNAdd(3); }
                  break;
               case 5:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
               case 7:
                  { jjCheckNAddStates(3, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_19(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_19(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   return jjMoveNfa_19(jjStopStringLiteralDfa_19(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private int jjMoveStringLiteralDfa0_19(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 330);
      case 13:
         return jjStopAtPos(0, 331);
      case 38:
         return jjStopAtPos(0, 322);
      case 68:
         return jjStartNfaWithStates_19(0, 324, 1);
      case 91:
         return jjStopAtPos(0, 326);
      case 93:
         return jjStopAtPos(0, 327);
      case 100:
         return jjStartNfaWithStates_19(0, 325, 1);
      case 123:
         return jjStopAtPos(0, 323);
      default :
         return jjMoveNfa_19(0, 0);
   }
}
private int jjStartNfaWithStates_19(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_19(state, pos + 1);
}
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x100000000L, 0x0L
};
private int jjMoveNfa_19(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 34)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 328)
                     kind = 328;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  { jjCheckNAddStates(6, 8); }
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 6:
                  if (curChar == 34 && kind > 329)
                     kind = 329;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 328)
                     kind = 328;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
               case 5:
                  { jjCheckNAddStates(6, 8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 328)
                     kind = 328;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_14(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active2 & 0x1eL) != 0L)
         {
            jjmatchedKind = 148;
            return 3;
         }
         if ((active2 & 0x4000L) != 0L)
            return 14;
         return -1;
      case 1:
         if ((active2 & 0x1eL) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 1;
            return 3;
         }
         return -1;
      case 2:
         if ((active2 & 0x1aL) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 2;
            return 3;
         }
         if ((active2 & 0x4L) != 0L)
            return 3;
         return -1;
      case 3:
         if ((active2 & 0x18L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 3;
            return 3;
         }
         if ((active2 & 0x2L) != 0L)
            return 3;
         return -1;
      case 4:
         if ((active2 & 0x18L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 4;
            return 3;
         }
         return -1;
      case 5:
         if ((active2 & 0x18L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 5;
            return 3;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_14(int pos, long active0, long active1, long active2){
   return jjMoveNfa_14(jjStopStringLiteralDfa_14(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_14(){
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 122);
      case 10:
         return jjStopAtPos(0, 121);
      case 13:
         return jjStopAtPos(0, 123);
      case 32:
         return jjStopAtPos(0, 124);
      case 34:
         return jjStartNfaWithStates_14(0, 142, 14);
      case 40:
         return jjStopAtPos(0, 143);
      case 41:
         return jjStopAtPos(0, 144);
      case 42:
         return jjStopAtPos(0, 140);
      case 43:
         return jjStopAtPos(0, 138);
      case 44:
         return jjStopAtPos(0, 145);
      case 45:
         return jjStopAtPos(0, 139);
      case 47:
         return jjStopAtPos(0, 141);
      case 60:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_14(0xa0L);
      case 61:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_14(0x1L);
      case 62:
         jjmatchedKind = 136;
         return jjMoveStringLiteralDfa1_14(0x200L);
      case 91:
         return jjStopAtPos(0, 125);
      case 93:
         return jjStopAtPos(0, 126);
      case 110:
         return jjMoveStringLiteralDfa1_14(0x10L);
      case 111:
         return jjMoveStringLiteralDfa1_14(0x2L);
      case 117:
         return jjMoveStringLiteralDfa1_14(0x4L);
      case 120:
         return jjMoveStringLiteralDfa1_14(0x8L);
      default :
         return jjMoveNfa_14(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_14(long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         break;
      case 62:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(1, 133);
         break;
      case 100:
         return jjMoveStringLiteralDfa2_14(active2, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa2_14(active2, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa2_14(active2, 0x18L);
      default :
         break;
   }
   return jjStartNfa_14(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_14(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_14(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_14(2, 130, 3);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_14(active2, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa3_14(active2, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa3_14(active2, 0x10L);
      default :
         break;
   }
   return jjStartNfa_14(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_14(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_14(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_14(active2, 0x18L);
      case 114:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_14(3, 129, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_14(2, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa4_14(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_14(2, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(3, 0L, 0L, active2);
      return 4;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa5_14(active2, 0x18L);
      default :
         break;
   }
   return jjStartNfa_14(3, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa5_14(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_14(3, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(4, 0L, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_14(active2, 0x18L);
      default :
         break;
   }
   return jjStartNfa_14(4, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa6_14(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_14(4, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(5, 0L, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_14(6, 131, 3);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_14(6, 132, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_14(5, 0L, 0L, active2);
}
private int jjStartNfaWithStates_14(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_14(state, pos + 1);
}
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x100000000L, 0x1040001090400010L
};
private int jjMoveNfa_14(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 34)
                  {
                     if (kind > 149)
                        kind = 149;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 146)
                        kind = 146;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x3ff100000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 8:
                  if (curChar == 34 && kind > 149)
                     kind = 149;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if (curChar == 46)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  { jjCheckNAddStates(3, 5); }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  { jjCheckNAdd(3); }
                  break;
               case 5:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  { jjCheckNAddStates(3, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
               case 7:
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 3:
                  if ((jjbitVec2[i2] & l2) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x40000000000L) != 0L)
            return 14;
         if ((active1 & 0xf0000000L) != 0L)
         {
            jjmatchedKind = 111;
            return 3;
         }
         return -1;
      case 1:
         if ((active1 & 0xf0000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 1;
            return 3;
         }
         return -1;
      case 2:
         if ((active1 & 0xd0000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 2;
            return 3;
         }
         if ((active1 & 0x20000000L) != 0L)
            return 3;
         return -1;
      case 3:
         if ((active1 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 3;
            return 3;
         }
         if ((active1 & 0x10000000L) != 0L)
            return 3;
         return -1;
      case 4:
         if ((active1 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
            return 3;
         }
         return -1;
      case 5:
         if ((active1 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 5;
            return 3;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0, long active1){
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_12(){
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_12(0, 106, 14);
      case 40:
         return jjStopAtPos(0, 107);
      case 41:
         return jjStopAtPos(0, 108);
      case 42:
         return jjStopAtPos(0, 103);
      case 43:
         return jjStopAtPos(0, 101);
      case 44:
         return jjStopAtPos(0, 105);
      case 45:
         return jjStopAtPos(0, 102);
      case 47:
         return jjStopAtPos(0, 104);
      case 60:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_12(0x500000000L);
      case 61:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_12(0x8000000L);
      case 62:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_12(0x1000000000L);
      case 64:
         return jjStopAtPos(0, 89);
      case 110:
         return jjMoveStringLiteralDfa1_12(0x80000000L);
      case 111:
         return jjMoveStringLiteralDfa1_12(0x10000000L);
      case 117:
         return jjMoveStringLiteralDfa1_12(0x20000000L);
      case 120:
         return jjMoveStringLiteralDfa1_12(0x40000000L);
      default :
         return jjMoveNfa_12(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_12(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      case 62:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 100:
         return jjMoveStringLiteralDfa2_12(active1, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa2_12(active1, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa2_12(active1, 0xc0000000L);
      default :
         break;
   }
   return jjStartNfa_12(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_12(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_12(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_12(2, 93, 3);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_12(active1, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa3_12(active1, 0x40000000L);
      case 116:
         return jjMoveStringLiteralDfa3_12(active1, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_12(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_12(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_12(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_12(active1, 0xc0000000L);
      case 114:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_12(3, 92, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_12(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_12(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_12(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa5_12(active1, 0xc0000000L);
      default :
         break;
   }
   return jjStartNfa_12(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_12(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_12(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_12(active1, 0xc0000000L);
      default :
         break;
   }
   return jjStartNfa_12(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_12(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_12(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_12(6, 94, 3);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_12(6, 95, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_12(5, 0L, active1);
}
private int jjStartNfaWithStates_12(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_12(state, pos + 1);
}
private int jjMoveNfa_12(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 34)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 8:
                  if (curChar == 34 && kind > 112)
                     kind = 112;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if (curChar == 46)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  { jjCheckNAddStates(3, 5); }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  { jjCheckNAdd(3); }
                  break;
               case 5:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  { jjCheckNAddStates(3, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
               case 7:
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 3:
                  if ((jjbitVec2[i2] & l2) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0, long active1){
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_13(){
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_13(0x140000000000000L);
      case 40:
         return jjStopAtPos(0, 115);
      case 64:
         return jjStopAtPos(0, 117);
      case 91:
         return jjStopAtPos(0, 114);
      default :
         return jjMoveNfa_13(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_13(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         break;
      case 42:
         return jjMoveStringLiteralDfa2_13(active1, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_13(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_13(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_13(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 120);
         break;
      default :
         break;
   }
   return jjStartNfa_13(1, 0L, active1);
}
private int jjMoveNfa_13(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xfffffef7ffffd9ffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAdd(0); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  break;
               case 0:
                  if ((0xfffffef7ffffd9ffL & l) == 0L)
                     break;
                  kind = 116;
                  { jjCheckNAdd(0); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0xfffffffff7fffffeL & l) == 0L)
                     break;
                  kind = 116;
                  { jjCheckNAdd(0); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  { jjCheckNAdd(0); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x300000000000L) != 0L)
            return 0;
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 47;
            return 0;
         }
         return -1;
      case 1:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
            return 0;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0){
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_9(){
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa1_9(0x400000000000L);
      case 67:
         return jjStartNfaWithStates_9(0, 45, 0);
      case 79:
         return jjStartNfaWithStates_9(0, 44, 0);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_9(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa2_9(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_9(0, active0);
}
private int jjMoveStringLiteralDfa2_9(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_9(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_9(2, 46, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_9(1, active0);
}
private int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ffe31400000000L & l) == 0L)
                     break;
                  kind = 47;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  kind = 47;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0){
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_8(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_8(0, 0);
   }
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 39;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_17(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      case 0:
         if ((active3 & 0x1000000L) != 0L)
            return 14;
         if ((active3 & 0x7800L) != 0L)
         {
            jjmatchedKind = 224;
            return 3;
         }
         return -1;
      case 1:
         if ((active3 & 0x7800L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 1;
            return 3;
         }
         return -1;
      case 2:
         if ((active3 & 0x6800L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 2;
            return 3;
         }
         if ((active3 & 0x1000L) != 0L)
            return 3;
         return -1;
      case 3:
         if ((active3 & 0x6000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 3;
            return 3;
         }
         if ((active3 & 0x800L) != 0L)
            return 3;
         return -1;
      case 4:
         if ((active3 & 0x6000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 4;
            return 3;
         }
         return -1;
      case 5:
         if ((active3 & 0x6000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 5;
            return 3;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_17(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_17(jjStopStringLiteralDfa_17(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_17(){
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_17(0, 216, 14);
      case 40:
         return jjStopAtPos(0, 218);
      case 41:
         return jjStopAtPos(0, 219);
      case 42:
         return jjStopAtPos(0, 214);
      case 43:
         return jjStopAtPos(0, 212);
      case 44:
         return jjStopAtPos(0, 200);
      case 45:
         return jjStopAtPos(0, 213);
      case 47:
         return jjStopAtPos(0, 215);
      case 58:
         return jjStopAtPos(0, 217);
      case 60:
         jjmatchedKind = 208;
         return jjMoveStringLiteralDfa1_17(0x28000L);
      case 61:
         jjmatchedKind = 201;
         return jjMoveStringLiteralDfa1_17(0x400L);
      case 62:
         jjmatchedKind = 210;
         return jjMoveStringLiteralDfa1_17(0x80000L);
      case 91:
         return jjStopAtPos(0, 221);
      case 93:
         return jjStopAtPos(0, 222);
      case 110:
         return jjMoveStringLiteralDfa1_17(0x4000L);
      case 111:
         return jjMoveStringLiteralDfa1_17(0x800L);
      case 117:
         return jjMoveStringLiteralDfa1_17(0x1000L);
      case 120:
         return jjMoveStringLiteralDfa1_17(0x2000L);
      default :
         return jjMoveNfa_17(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_17(long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active3 & 0x400L) != 0L)
            return jjStopAtPos(1, 202);
         else if ((active3 & 0x20000L) != 0L)
            return jjStopAtPos(1, 209);
         else if ((active3 & 0x80000L) != 0L)
            return jjStopAtPos(1, 211);
         break;
      case 62:
         if ((active3 & 0x8000L) != 0L)
            return jjStopAtPos(1, 207);
         break;
      case 100:
         return jjMoveStringLiteralDfa2_17(active3, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa2_17(active3, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa2_17(active3, 0x6000L);
      default :
         break;
   }
   return jjStartNfa_17(0, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa2_17(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_17(0, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(1, 0L, 0L, 0L, active3);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_17(2, 204, 3);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_17(active3, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa3_17(active3, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa3_17(active3, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_17(1, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa3_17(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_17(1, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(2, 0L, 0L, 0L, active3);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_17(active3, 0x6000L);
      case 114:
         if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_17(3, 203, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_17(2, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa4_17(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_17(2, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(3, 0L, 0L, 0L, active3);
      return 4;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa5_17(active3, 0x6000L);
      default :
         break;
   }
   return jjStartNfa_17(3, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa5_17(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_17(3, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(4, 0L, 0L, 0L, active3);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_17(active3, 0x6000L);
      default :
         break;
   }
   return jjStartNfa_17(4, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa6_17(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_17(4, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(5, 0L, 0L, 0L, active3);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_17(6, 205, 3);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_17(6, 206, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_17(5, 0L, 0L, 0L, active3);
}
private int jjStartNfaWithStates_17(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_17(state, pos + 1);
}
private int jjMoveNfa_17(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 34)
                  {
                     if (kind > 225)
                        kind = 225;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 8:
                  if (curChar == 34 && kind > 225)
                     kind = 225;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if (curChar == 46)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  { jjCheckNAddStates(3, 5); }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  { jjCheckNAdd(3); }
                  break;
               case 5:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  { jjCheckNAddStates(3, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
               case 7:
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 3:
                  if ((jjbitVec2[i2] & l2) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   switch (pos)
   {
      case 0:
         if ((active4 & 0x10000000000000L) != 0L)
            return 14;
         if ((active4 & 0x1e000000000L) != 0L)
         {
            jjmatchedKind = 316;
            return 3;
         }
         return -1;
      case 1:
         if ((active4 & 0x1e000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 1;
            return 3;
         }
         return -1;
      case 2:
         if ((active4 & 0x1a000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 2;
            return 3;
         }
         if ((active4 & 0x4000000000L) != 0L)
            return 3;
         return -1;
      case 3:
         if ((active4 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 3;
            return 3;
         }
         if ((active4 & 0x2000000000L) != 0L)
            return 3;
         return -1;
      case 4:
         if ((active4 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 4;
            return 3;
         }
         return -1;
      case 5:
         if ((active4 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 5;
            return 3;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 318);
      case 13:
         return jjStopAtPos(0, 319);
      case 34:
         return jjStartNfaWithStates_4(0, 308, 14);
      case 35:
         return jjMoveStringLiteralDfa1_4(0x40L, 0x0L);
      case 38:
         return jjStopAtPos(0, 303);
      case 40:
         return jjStopAtPos(0, 310);
      case 41:
         return jjStopAtPos(0, 311);
      case 42:
         return jjStopAtPos(0, 306);
      case 43:
         return jjStopAtPos(0, 304);
      case 44:
         return jjStopAtPos(0, 302);
      case 45:
         return jjStopAtPos(0, 305);
      case 47:
         return jjStopAtPos(0, 307);
      case 58:
         return jjStopAtPos(0, 309);
      case 60:
         jjmatchedKind = 298;
         return jjMoveStringLiteralDfa1_4(0x0L, 0xa0000000000L);
      case 61:
         jjmatchedKind = 291;
         return jjMoveStringLiteralDfa1_4(0x0L, 0x1000000000L);
      case 62:
         jjmatchedKind = 300;
         return jjMoveStringLiteralDfa1_4(0x0L, 0x200000000000L);
      case 64:
         return jjStopAtPos(0, 290);
      case 91:
         return jjStopAtPos(0, 312);
      case 93:
         return jjStopAtPos(0, 313);
      case 110:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x10000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x4000000000L);
      case 120:
         return jjMoveStringLiteralDfa1_4(0x0L, 0x8000000000L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0, long active4){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0, 0L, 0L, 0L, active4, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 61:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 292);
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 299);
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 301);
         break;
      case 62:
         if ((active4 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 297);
         break;
      case 100:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active4, 0x2000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active4, 0x4000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_4(active0, 0L, active4, 0x18000000000L);
      default :
         break;
   }
   return jjStartNfa_4(0, active0, 0L, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0, long old4, long active4){
   if (((active0 &= old0) | (active4 &= old4)) == 0L)
      return jjStartNfa_4(0, old0, 0L, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, 0L, 0L, 0L, 0L, active4, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_4(2, 294, 3);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_4(active4, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_4(active4, 0x8000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_4(active4, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_4(1, 0L, 0L, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa3_4(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_4(1, 0L, 0L, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, 0L, 0L, 0L, 0L, active4, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_4(active4, 0x18000000000L);
      case 114:
         if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_4(3, 293, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_4(2, 0L, 0L, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa4_4(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_4(2, 0L, 0L, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(3, 0L, 0L, 0L, 0L, active4, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa5_4(active4, 0x18000000000L);
      default :
         break;
   }
   return jjStartNfa_4(3, 0L, 0L, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa5_4(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_4(3, 0L, 0L, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(4, 0L, 0L, 0L, 0L, active4, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_4(active4, 0x18000000000L);
      default :
         break;
   }
   return jjStartNfa_4(4, 0L, 0L, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa6_4(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_4(4, 0L, 0L, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(5, 0L, 0L, 0L, 0L, active4, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_4(6, 295, 3);
         else if ((active4 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_4(6, 296, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_4(5, 0L, 0L, 0L, 0L, active4, 0L);
}
private int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 34)
                  {
                     if (kind > 317)
                        kind = 317;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 314)
                        kind = 314;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 315)
                     kind = 315;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 316)
                     kind = 316;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 8:
                  if (curChar == 34 && kind > 317)
                     kind = 317;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 314)
                     kind = 314;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 314)
                     kind = 314;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 315)
                     kind = 315;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if (curChar == 46)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 315)
                     kind = 315;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  { jjCheckNAddStates(3, 5); }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 316)
                     kind = 316;
                  { jjCheckNAdd(3); }
                  break;
               case 5:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  { jjCheckNAddStates(3, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
               case 7:
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 3:
                  if ((jjbitVec2[i2] & l2) == 0L)
                     break;
                  if (kind > 316)
                     kind = 316;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      case 0:
         if ((active4 & 0x1e0L) != 0L)
         {
            jjmatchedKind = 284;
            return 3;
         }
         if ((active4 & 0x80000L) != 0L)
            return 14;
         return -1;
      case 1:
         if ((active4 & 0x1e0L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 1;
            return 3;
         }
         return -1;
      case 2:
         if ((active4 & 0x1a0L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 2;
            return 3;
         }
         if ((active4 & 0x40L) != 0L)
            return 3;
         return -1;
      case 3:
         if ((active4 & 0x180L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 3;
            return 3;
         }
         if ((active4 & 0x20L) != 0L)
            return 3;
         return -1;
      case 4:
         if ((active4 & 0x180L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 4;
            return 3;
         }
         return -1;
      case 5:
         if ((active4 & 0x180L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 5;
            return 3;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 286);
      case 13:
         return jjStopAtPos(0, 287);
      case 34:
         return jjStartNfaWithStates_2(0, 275, 14);
      case 35:
         return jjMoveStringLiteralDfa1_2(0x10L, 0x0L);
      case 38:
         return jjStopAtPos(0, 270);
      case 40:
         return jjStopAtPos(0, 278);
      case 41:
         return jjStopAtPos(0, 279);
      case 42:
         return jjStopAtPos(0, 273);
      case 43:
         return jjStopAtPos(0, 271);
      case 44:
         return jjStopAtPos(0, 277);
      case 45:
         return jjStopAtPos(0, 272);
      case 47:
         return jjStopAtPos(0, 274);
      case 58:
         return jjStopAtPos(0, 276);
      case 60:
         jjmatchedKind = 266;
         return jjMoveStringLiteralDfa1_2(0x0L, 0xa00L);
      case 61:
         jjmatchedKind = 259;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x10L);
      case 62:
         jjmatchedKind = 268;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x2000L);
      case 91:
         return jjStopAtPos(0, 280);
      case 93:
         return jjStopAtPos(0, 281);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x40L);
      case 120:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x80L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0, long active4){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, 0L, 0L, 0L, active4);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 61:
         if ((active4 & 0x10L) != 0L)
            return jjStopAtPos(1, 260);
         else if ((active4 & 0x800L) != 0L)
            return jjStopAtPos(1, 267);
         else if ((active4 & 0x2000L) != 0L)
            return jjStopAtPos(1, 269);
         break;
      case 62:
         if ((active4 & 0x200L) != 0L)
            return jjStopAtPos(1, 265);
         break;
      case 100:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active4, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active4, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active4, 0x180L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0, long old4, long active4){
   if (((active0 &= old0) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(0, old0, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, 0L, 0L, 0L, 0L, active4);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_2(2, 262, 3);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_2(active4, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa3_2(active4, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa3_2(active4, 0x100L);
      default :
         break;
   }
   return jjStartNfa_2(1, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa3_2(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_2(1, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, 0L, 0L, 0L, 0L, active4);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_2(active4, 0x180L);
      case 114:
         if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(3, 261, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_2(2, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa4_2(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_2(2, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, 0L, 0L, 0L, 0L, active4);
      return 4;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa5_2(active4, 0x180L);
      default :
         break;
   }
   return jjStartNfa_2(3, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa5_2(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_2(3, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, 0L, 0L, 0L, 0L, active4);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_2(active4, 0x180L);
      default :
         break;
   }
   return jjStartNfa_2(4, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa6_2(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_2(4, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, 0L, 0L, 0L, 0L, active4);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(6, 263, 3);
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(6, 264, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_2(5, 0L, 0L, 0L, 0L, active4);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 34)
                  {
                     if (kind > 285)
                        kind = 285;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 282)
                        kind = 282;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 283)
                     kind = 283;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 284)
                     kind = 284;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 8:
                  if (curChar == 34 && kind > 285)
                     kind = 285;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 282)
                     kind = 282;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 282)
                     kind = 282;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 283)
                     kind = 283;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if (curChar == 46)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 283)
                     kind = 283;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  { jjCheckNAddStates(3, 5); }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 284)
                     kind = 284;
                  { jjCheckNAdd(3); }
                  break;
               case 5:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  { jjCheckNAddStates(3, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
               case 7:
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 3:
                  if ((jjbitVec2[i2] & l2) == 0L)
                     break;
                  if (kind > 284)
                     kind = 284;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0){
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_10(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 2:
                  { jjCheckNAddStates(9, 11); }
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 4:
                  if (curChar == 34 && kind > 52)
                     kind = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
               case 3:
                  { jjCheckNAddStates(9, 11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 170);
      case 10:
         return jjStopAtPos(0, 168);
      case 13:
         return jjStopAtPos(0, 169);
      case 32:
         return jjStopAtPos(0, 171);
      case 35:
         return jjMoveStringLiteralDfa1_5(0x80L, 0x300000000000L);
      case 40:
         return jjStopAtPos(0, 189);
      case 41:
         return jjStopAtPos(0, 190);
      case 42:
         return jjStopAtPos(0, 187);
      case 43:
         return jjStopAtPos(0, 185);
      case 44:
         return jjStopAtPos(0, 193);
      case 45:
         return jjStopAtPos(0, 186);
      case 47:
         return jjStopAtPos(0, 188);
      case 60:
         jjmatchedKind = 181;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x50000000000000L);
      case 61:
         jjmatchedKind = 174;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x800000000000L);
      case 62:
         jjmatchedKind = 183;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x100000000000000L);
      case 91:
         return jjStopAtPos(0, 191);
      case 93:
         return jjStopAtPos(0, 192);
      case 110:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x8000000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x1000000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x2000000000000L);
      case 120:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x4000000000000L);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active0, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, active0, 0L, active2, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 173);
         break;
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 61:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 175);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 182);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 184);
         break;
      case 62:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 172);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 180);
         break;
      case 100:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active2, 0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active2, 0x2000000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active2, 0xc000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(0, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa2_5(long old0, long active0, long old2, long active2){
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(0, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, 0L, 0L, active2, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStopAtPos(2, 177);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_5(active2, 0x1000000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_5(active2, 0x4000000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_5(active2, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(1, 0L, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa3_5(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_5(1, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(2, 0L, 0L, active2, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_5(active2, 0xc000000000000L);
      case 114:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(3, 176);
         break;
      default :
         break;
   }
   return jjStartNfa_5(2, 0L, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa4_5(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_5(2, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(3, 0L, 0L, active2, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa5_5(active2, 0xc000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(3, 0L, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa5_5(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_5(3, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(4, 0L, 0L, active2, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_5(active2, 0xc000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(4, 0L, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa6_5(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_5(4, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(5, 0L, 0L, active2, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStopAtPos(6, 178);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStopAtPos(6, 179);
         break;
      default :
         break;
   }
   return jjStartNfa_5(5, 0L, 0L, active2, 0L);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 194)
                        kind = 194;
                     { jjCheckNAddStates(12, 14); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(6, 8); }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 195)
                     kind = 195;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if (curChar == 34)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 4:
                  { jjCheckNAddStates(6, 8); }
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 6:
                  if (curChar == 34 && kind > 196)
                     kind = 196;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 194)
                     kind = 194;
                  { jjCheckNAddStates(12, 14); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 194)
                     kind = 194;
                  { jjCheckNAdd(8); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 195)
                     kind = 195;
                  { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if (curChar == 46)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 195)
                     kind = 195;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
               case 5:
                  { jjCheckNAddStates(6, 8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x4000L) != 0L)
            return 14;
         if ((active1 & 0xfL) != 0L)
         {
            jjmatchedKind = 83;
            return 3;
         }
         return -1;
      case 1:
         if ((active1 & 0xfL) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 1;
            return 3;
         }
         return -1;
      case 2:
         if ((active1 & 0xdL) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 2;
            return 3;
         }
         if ((active1 & 0x2L) != 0L)
            return 3;
         return -1;
      case 3:
         if ((active1 & 0xcL) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 3;
            return 3;
         }
         if ((active1 & 0x1L) != 0L)
            return 3;
         return -1;
      case 4:
         if ((active1 & 0xcL) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 4;
            return 3;
         }
         return -1;
      case 5:
         if ((active1 & 0xcL) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 5;
            return 3;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0, long active1){
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_11(){
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_11(0, 78, 14);
      case 40:
         return jjStopAtPos(0, 79);
      case 41:
         return jjStopAtPos(0, 80);
      case 42:
         return jjStopAtPos(0, 75);
      case 43:
         return jjStopAtPos(0, 73);
      case 44:
         return jjStopAtPos(0, 77);
      case 45:
         return jjStopAtPos(0, 74);
      case 47:
         return jjStopAtPos(0, 76);
      case 60:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_11(0x0L, 0x50L);
      case 61:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_11(0x8000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_11(0x0L, 0x100L);
      case 64:
         return jjStopAtPos(0, 61);
      case 110:
         return jjMoveStringLiteralDfa1_11(0x0L, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa1_11(0x0L, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa1_11(0x0L, 0x2L);
      case 120:
         return jjMoveStringLiteralDfa1_11(0x0L, 0x4L);
      default :
         return jjMoveNfa_11(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_11(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 62:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 100:
         return jjMoveStringLiteralDfa2_11(active0, 0L, active1, 0x1L);
      case 110:
         return jjMoveStringLiteralDfa2_11(active0, 0L, active1, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa2_11(active0, 0L, active1, 0xcL);
      default :
         break;
   }
   return jjStartNfa_11(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_11(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_11(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_11(2, 65, 3);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_11(active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa3_11(active1, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa3_11(active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_11(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_11(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_11(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_11(active1, 0xcL);
      case 114:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_11(3, 64, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_11(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_11(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_11(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa5_11(active1, 0xcL);
      default :
         break;
   }
   return jjStartNfa_11(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_11(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_11(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_11(active1, 0xcL);
      default :
         break;
   }
   return jjStartNfa_11(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_11(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_11(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_11(6, 66, 3);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_11(6, 67, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_11(5, 0L, active1);
}
private int jjStartNfaWithStates_11(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_11(state, pos + 1);
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 34)
                  {
                     if (kind > 84)
                        kind = 84;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 8:
                  if (curChar == 34 && kind > 84)
                     kind = 84;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if (curChar == 46)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  { jjCheckNAddStates(3, 5); }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAdd(3); }
                  break;
               case 5:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  { jjCheckNAddStates(3, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
               case 7:
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 3:
                  if ((jjbitVec2[i2] & l2) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 150);
      case 13:
         return jjStopAtPos(0, 151);
      case 34:
         return jjStopAtPos(0, 156);
      case 35:
         return jjMoveStringLiteralDfa1_3(0x20L);
      case 40:
         return jjStopAtPos(0, 154);
      case 41:
         return jjStopAtPos(0, 155);
      case 44:
         return jjStopAtPos(0, 157);
      case 58:
         return jjStopAtPos(0, 162);
      case 91:
         return jjStopAtPos(0, 158);
      case 93:
         return jjStopAtPos(0, 159);
      default :
         return jjMoveNfa_3(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, 0L, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0, 0L, 0L);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 160)
                     kind = 160;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  { jjCheckNAdd(2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_15(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_15(int pos, long active0, long active1, long active2){
   return jjMoveNfa_15(jjStopStringLiteralDfa_15(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_15(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_15(0, 0);
   }
}
private int jjMoveNfa_15(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  kind = 163;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  kind = 163;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_20(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_20(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   return jjMoveNfa_20(jjStopStringLiteralDfa_20(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private int jjMoveStringLiteralDfa0_20(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_20(0, 0);
   }
}
private int jjMoveNfa_20(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 2:
                  { jjCheckNAddStates(9, 11); }
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 4:
                  if (curChar == 34 && kind > 338)
                     kind = 338;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
               case 3:
                  { jjCheckNAddStates(9, 11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_7()
{
   return jjMoveNfa_7(0, 0);
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if (curChar == 63)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0){
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 8);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     kind = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 9)
                     kind = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_16(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_16(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_16(jjStopStringLiteralDfa_16(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_16(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_16(0, 0);
   }
}
private int jjMoveNfa_16(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffecf6ffffd9ffL & l) == 0L)
                     break;
                  kind = 199;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 199;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 199)
                     kind = 199;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_0()
{
   return jjMoveNfa_0(0, 0);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x2400L & l) != 0L)
                     kind = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000000L) != 0L)
            return 22;
         if ((active0 & 0x1bffdd1004L) != 0L)
            return 9;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_1(0, 38, 22);
      case 35:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_1(0x1bffdc1004L);
      case 64:
         return jjStopAtPos(0, 17);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 36:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 42:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 61:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 62:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 63:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 66:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         break;
      case 67:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 68:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 71:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      case 74:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 76:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      case 83:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 87:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      case 88:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(1, 33, 23);
         break;
      case 90:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      case 94:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 113:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 22;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  else if (curChar == 60)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  break;
               case 22:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(2, 3); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(15, 17); }
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddTwoStates(18, 20); }
                  else if (curChar == 47)
                     { jjCheckNAdd(19); }
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddTwoStates(15, 17); }
                  else if (curChar == 47)
                     { jjCheckNAdd(16); }
                  break;
               case 0:
                  if ((0xfffffff7ffffd9ffL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(13); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 9;
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(2, 3); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(16, 19); }
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(18, 21); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 2:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 3:
                  if (curChar == 47)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 58 && kind > 21)
                     kind = 21;
                  break;
               case 6:
                  if (curChar == 34)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 8:
                  if (curChar == 34)
                     { jjCheckNAdd(5); }
                  break;
               case 10:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if (curChar == 60 && kind > 34)
                     kind = 34;
                  break;
               case 12:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if ((0xfffffff7ffffd9ffL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAdd(13); }
                  break;
               case 14:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(18, 21); }
                  break;
               case 15:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddTwoStates(15, 17); }
                  break;
               case 17:
                  if (curChar == 47)
                     { jjCheckNAdd(16); }
                  break;
               case 18:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddTwoStates(18, 20); }
                  break;
               case 20:
                  if (curChar == 47)
                     { jjCheckNAdd(19); }
                  break;
               case 21:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(16, 19); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffbffffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(13); }
                  }
                  else if (curChar == 94)
                  {
                     if (kind > 3)
                        kind = 3;
                  }
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjAddStates(22, 23); }
                  break;
               case 9:
                  if (curChar == 88)
                     { jjAddStates(24, 25); }
                  break;
               case 13:
                  if ((0xffffffffbffffffeL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAdd(13); }
                  break;
               case 16:
                  if (curChar == 74 && kind > 14)
                     kind = 14;
                  break;
               case 19:
                  if (curChar == 78 && kind > 15)
                     kind = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 13:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 22 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_18(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      case 0:
         if ((active3 & 0x20000000000000L) != 0L)
            return 14;
         if ((active3 & 0xf0000000000L) != 0L)
         {
            jjmatchedKind = 253;
            return 3;
         }
         return -1;
      case 1:
         if ((active3 & 0xf0000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 1;
            return 3;
         }
         return -1;
      case 2:
         if ((active3 & 0x20000000000L) != 0L)
            return 3;
         if ((active3 & 0xd0000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 2;
            return 3;
         }
         return -1;
      case 3:
         if ((active3 & 0x10000000000L) != 0L)
            return 3;
         if ((active3 & 0xc0000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 3;
            return 3;
         }
         return -1;
      case 4:
         if ((active3 & 0xc0000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 4;
            return 3;
         }
         return -1;
      case 5:
         if ((active3 & 0xc0000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 5;
            return 3;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_18(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_18(jjStopStringLiteralDfa_18(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_18(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 255);
      case 13:
         return jjStopAtPos(0, 256);
      case 34:
         return jjStartNfaWithStates_18(0, 245, 14);
      case 40:
         return jjStopAtPos(0, 247);
      case 41:
         return jjStopAtPos(0, 248);
      case 42:
         return jjStopAtPos(0, 243);
      case 43:
         return jjStopAtPos(0, 241);
      case 45:
         return jjStopAtPos(0, 242);
      case 47:
         return jjStopAtPos(0, 244);
      case 58:
         return jjStopAtPos(0, 246);
      case 60:
         jjmatchedKind = 237;
         return jjMoveStringLiteralDfa1_18(0x500000000000L);
      case 61:
         jjmatchedKind = 230;
         return jjMoveStringLiteralDfa1_18(0x8000000000L);
      case 62:
         jjmatchedKind = 239;
         return jjMoveStringLiteralDfa1_18(0x1000000000000L);
      case 91:
         return jjStopAtPos(0, 250);
      case 93:
         return jjStopAtPos(0, 251);
      case 110:
         return jjMoveStringLiteralDfa1_18(0x80000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_18(0x10000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_18(0x20000000000L);
      case 120:
         return jjMoveStringLiteralDfa1_18(0x40000000000L);
      default :
         return jjMoveNfa_18(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_18(long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(0, 0L, 0L, 0L, active3, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active3 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 231);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 238);
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 240);
         break;
      case 62:
         if ((active3 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 236);
         break;
      case 100:
         return jjMoveStringLiteralDfa2_18(active3, 0x10000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_18(active3, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_18(active3, 0xc0000000000L);
      default :
         break;
   }
   return jjStartNfa_18(0, 0L, 0L, 0L, active3, 0L);
}
private int jjMoveStringLiteralDfa2_18(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_18(0, 0L, 0L, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(1, 0L, 0L, 0L, active3, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_18(2, 233, 3);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_18(active3, 0x10000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_18(active3, 0x40000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_18(active3, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_18(1, 0L, 0L, 0L, active3, 0L);
}
private int jjMoveStringLiteralDfa3_18(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_18(1, 0L, 0L, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(2, 0L, 0L, 0L, active3, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_18(active3, 0xc0000000000L);
      case 114:
         if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_18(3, 232, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_18(2, 0L, 0L, 0L, active3, 0L);
}
private int jjMoveStringLiteralDfa4_18(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_18(2, 0L, 0L, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(3, 0L, 0L, 0L, active3, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa5_18(active3, 0xc0000000000L);
      default :
         break;
   }
   return jjStartNfa_18(3, 0L, 0L, 0L, active3, 0L);
}
private int jjMoveStringLiteralDfa5_18(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_18(3, 0L, 0L, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(4, 0L, 0L, 0L, active3, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_18(active3, 0xc0000000000L);
      default :
         break;
   }
   return jjStartNfa_18(4, 0L, 0L, 0L, active3, 0L);
}
private int jjMoveStringLiteralDfa6_18(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_18(4, 0L, 0L, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(5, 0L, 0L, 0L, active3, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_18(6, 234, 3);
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_18(6, 235, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_18(5, 0L, 0L, 0L, active3, 0L);
}
private int jjStartNfaWithStates_18(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_18(state, pos + 1);
}
private int jjMoveNfa_18(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 34)
                  {
                     if (kind > 254)
                        kind = 254;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 249)
                        kind = 249;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 252)
                     kind = 252;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 253)
                     kind = 253;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 34)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 8:
                  if (curChar == 34 && kind > 254)
                     kind = 254;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 249)
                     kind = 249;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 249)
                     kind = 249;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 252)
                     kind = 252;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if (curChar == 46)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 252)
                     kind = 252;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  { jjCheckNAddStates(3, 5); }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 253)
                     kind = 253;
                  { jjCheckNAdd(3); }
                  break;
               case 5:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 7:
                  { jjCheckNAddStates(3, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
               case 7:
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 3:
                  if ((jjbitVec2[i2] & l2) == 0L)
                     break;
                  if (kind > 253)
                     kind = 253;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_22(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_22(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   return jjMoveNfa_22(jjStopStringLiteralDfa_22(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private int jjMoveStringLiteralDfa0_22(){
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_22(0x100000000L);
      case 91:
         return jjStopAtPos(0, 354);
      case 93:
         return jjStopAtPos(0, 355);
      default :
         return jjMoveNfa_22(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_22(long active5){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_22(0, 0L, 0L, 0L, 0L, 0L, active5);
      return 1;
   }
   switch(curChar)
   {
      case 94:
         if ((active5 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 352);
         break;
      default :
         break;
   }
   return jjStartNfa_22(0, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveNfa_22(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 353)
                        kind = 353;
                     { jjCheckNAdd(0); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(26, 28); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 353)
                     kind = 353;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 356)
                     kind = 356;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if (curChar == 34)
                     { jjCheckNAddStates(26, 28); }
                  break;
               case 5:
                  { jjCheckNAddStates(26, 28); }
                  break;
               case 6:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(26, 28); }
                  break;
               case 7:
                  if (curChar == 34 && kind > 357)
                     kind = 357;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 356)
                     kind = 356;
                  { jjCheckNAdd(2); }
                  break;
               case 4:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
               case 6:
                  { jjCheckNAddStates(26, 28); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(26, 28); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 12, 5, 7, 8, 3, 5, 6, 1, 3, 4, 8, 9, 10, 4, 
   6, 5, 15, 17, 18, 20, 7, 8, 10, 11, 4, 6, 7, 
};

/* Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\43\77", null, null, null, "\43", "\100", "\43\123", "\43\127", "\43\103", null, 
"\43\44", "\43\136", "\43\107", "\43\112", "\43\132", "\43\104", "\43\144", "\43\114", 
"\43\161", "\43\75", "\43\102", "\43\130", null, "\43\76", "\43\41", null, null, null, 
null, null, null, null, "\117", "\103", "\42\162\42", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\100", "\75", "\75\75", 
"\157\144\145\162", "\165\156\144", "\170\157\162\137\164\142\144", 
"\156\157\164\137\164\142\144", "\74\76", "\74", "\74\75", "\76", "\76\75", "\53", "\55", "\52", "\57", "\54", 
"\42", "\50", "\51", null, null, null, null, null, null, null, null, "\100", "\75", 
"\75\75", "\157\144\145\162", "\165\156\144", "\170\157\162\137\164\142\144", 
"\156\157\164\137\164\142\144", "\74\76", "\74", "\74\75", "\76", "\76\75", "\53", "\55", "\52", "\57", "\54", 
"\42", "\50", "\51", null, null, null, null, null, "\133", "\50", null, "\100", 
"\43\44", null, null, null, null, null, null, "\133", "\135", "\75", "\75\75", 
"\157\144\145\162", "\165\156\144", "\170\157\162\137\164\142\144", 
"\156\157\164\137\164\142\144", "\74\76", "\74", "\74\75", "\76", "\76\75", "\53", "\55", "\52", "\57", "\42", 
"\50", "\51", "\54", null, null, null, null, null, null, null, null, "\50", "\51", 
"\42", "\54", "\133", "\135", null, null, "\72", null, null, null, null, null, null, 
null, null, null, "\43\76", "\43\44", "\75", "\75\75", "\157\144\145\162", 
"\165\156\144", "\170\157\162\137\164\142\144", "\156\157\164\137\164\142\144", "\74\76", 
"\74", "\74\75", "\76", "\76\75", "\53", "\55", "\52", "\57", "\50", "\51", "\133", 
"\135", "\54", null, null, null, null, null, null, "\54", "\75", "\75\75", 
"\157\144\145\162", "\165\156\144", "\170\157\162\137\164\142\144", 
"\156\157\164\137\164\142\144", "\74\76", "\74", "\74\75", "\76", "\76\75", "\53", "\55", "\52", "\57", "\42", 
"\72", "\50", "\51", null, "\133", "\135", null, null, null, null, null, null, null, 
"\75", "\75\75", "\157\144\145\162", "\165\156\144", "\170\157\162\137\164\142\144", 
"\156\157\164\137\164\142\144", "\74\76", "\74", "\74\75", "\76", "\76\75", "\53", "\55", "\52", "\57", "\42", 
"\72", "\50", "\51", null, "\133", "\135", null, null, null, null, null, null, null, 
"\75", "\75\75", "\157\144\145\162", "\165\156\144", "\170\157\162\137\164\142\144", 
"\156\157\164\137\164\142\144", "\74\76", "\74", "\74\75", "\76", "\76\75", "\46", "\53", "\55", "\52", "\57", 
"\42", "\72", "\54", "\50", "\51", "\133", "\135", null, null, null, null, null, null, 
null, null, "\100", "\75", "\75\75", "\157\144\145\162", "\165\156\144", 
"\170\157\162\137\164\142\144", "\156\157\164\137\164\142\144", "\74\76", "\74", "\74\75", "\76", "\76\75", 
"\54", "\46", "\53", "\55", "\52", "\57", "\42", "\72", "\50", "\51", "\133", "\135", 
null, null, null, null, null, null, null, null, "\46", "\173", "\104", "\144", 
"\133", "\135", null, null, null, null, null, null, null, null, null, null, null, 
"\46", "\54", "\175", "\133", "\135", null, null, null, null, null, null, null, null, 
"\43\136", null, "\133", "\135", null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/* Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 8:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         break;
       case 9:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         break;
       case 10:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         break;
       case 11:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_11();
         break;
       case 12:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_12();
         break;
       case 13:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_13();
         break;
       case 14:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_14();
         break;
       case 15:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_15();
         break;
       case 16:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_16();
         break;
       case 17:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_17();
         break;
       case 18:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_18();
         break;
       case 19:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_19();
         break;
       case 20:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_20();
         break;
       case 21:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_21();
         break;
       case 22:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_22();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /* Constructor. */
    public HitAssAstParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /* Constructor. */
  public HitAssAstParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /* Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 22; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /* Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /* Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 23 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/* Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "TXT_MODE",
   "COMMAND_MODE_DS",
   "COMMAND_MODE_SS",
   "COMMAND_MODE_AS",
   "COMMAND_MODE_MS",
   "COMMENT_MODE",
   "COMMENT_MODE_2",
   "COMMAND_MODE_DV",
   "COMMAND_MODE_FILE",
   "COMMAND_MODE_IB",
   "COMMAND_MODE_PS",
   "COMMAND_MODE_PS_EL",
   "COMMAND_MODE_PS_IDX_CHECK",
   "COMMAND_MODE_PS_IDX",
   "COMMAND_MODE_SK",
   "COMMAND_MODE_MS_BEFORE_ID",
   "COMMAND_MODE_IF",
   "COMMAND_MODE_FOR",
   "COMMAND_MODE_LS",
   "COMMAND_MODE_DUMP",
   "COMMAND_MODE_LS_BRACES",
   "COMMAND_MODE_HC",
};

/* Lex State array. */
public static final int[] jjnewLexState = {
   -1, 1, 6, 7, 6, 6, 6, 6, 1, -1, 1, -1, 17, -1, -1, -1, -1, -1, 17, 18, 3, -1, 16, 22, 2, 
   2, 2, 2, 2, 19, 20, 4, 10, 9, 8, 11, 15, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 
   -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 14, 12, 1, 1, 16, 1, 1, 1, 1, 1, 1, 
   -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 11, 16, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 21, -1, 
   -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xe010f0bffffff003L, 0xe07ffffffe1fffffL, 0xfffff00ffc3fffffL, 0x7fffffc3ffffff9fL, 
   0x3ffffffc3ffffff8L, 0x3f0ffc03fcL, 
};
static final long[] jjtoSkip = {
   0x1fef0f4000000500L, 0x1f80000001e00000L, 0xff003c00000L, 0x8000003c00000060L, 
   0xc0000003c0000007L, 0x3c0f003fc03L, 
};
static final long[] jjtoSpecial = {
   0x500L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0xafcL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[22];
    private final int[] jjstateSet = new int[2 * 22];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
