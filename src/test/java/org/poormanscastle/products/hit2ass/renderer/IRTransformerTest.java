package org.poormanscastle.products.hit2ass.renderer;

import org.apache.commons.lang3.StringUtils;
import org.junit.Test;
import org.poormanscastle.products.hit2ass.TestUtils;
import org.poormanscastle.products.hit2ass.ast.domain.ClouBaustein;
import org.poormanscastle.products.hit2ass.parser.javacc.HitAssAstParser;
import org.poormanscastle.products.hit2ass.renderer.domain.Workspace;
import org.poormanscastle.products.hit2ass.transformer.FixedTextMerger;
import org.poormanscastle.products.hit2ass.transformer.InsertBlanksVisitor;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

/**
 * Created by georg.federmann@poormanscastle.com on 5/9/16.
 */
public class IRTransformerTest {

    private ClouBaustein baustein;
    private HitAssAstParser parser;
    private FixedTextMerger merger = new FixedTextMerger();
    private InsertBlanksVisitor blanksVisitor = new InsertBlanksVisitor();
    private IRTransformer irTransformer = new IRTransformer();

    @Test
    public void testHitCommandReturn() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("HitCommandReturn"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        baustein.accept(blanksVisitor);
        baustein.accept(irTransformer);
        Workspace workspace = irTransformer.getWorkspace();
        assertNotNull(workspace);
        assertEquals("Workspace{workspaceName='HitAssWorkspace', projectsName='HitAssProjects', projectName='HitAssProject', documentName='HitAssDocument', repeatingPageName='HitAssRepeatingPage', pageContentName='HitAssPageContent', contentContainer=Paragraph{contentElements=[Text{name='text', text='Gleichzeitig ersuchen wir den (das) beiliegende(n) Bescheid (INFO)'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='2'}, Text{name='text', text='anlässlich der Information zu expedieren bzw. auszuhändigen und'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='wie folgt storniert haben:'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='5'}]}}", workspace.toString());
        String acr = workspace.getContent();
        assertFalse(StringUtils.isBlank(acr));
    }

    @Test
    public void testIfElse() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("SimpleIfLetter"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        baustein.accept(blanksVisitor);
        baustein.accept(irTransformer);
        Workspace workspace = irTransformer.getWorkspace();
        assertNotNull(workspace);
        String acrString = workspace.getContent();
        assertFalse(StringUtils.isBlank(acrString));
    }

    @Test
    public void testSection() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("SectionBreak"), "ISO8859_1");
        baustein = parser.CB();
        baustein.accept(merger);
        baustein.accept(blanksVisitor);
        baustein.accept(irTransformer);
        Workspace workspace = irTransformer.getWorkspace();
        assertNotNull(workspace);
        String acrString = workspace.getContent();
        assertFalse(StringUtils.isBlank(acrString));
        assertEquals("Workspace{workspaceName='HitAssWorkspace', projectsName='HitAssProjects', projectName='HitAssProject', documentName='HitAssDocument', repeatingPageName='HitAssRepeatingPage', pageContentName='HitAssPageContent', contentContainer=Paragraph{contentElements=[DynamicContentReference{name='Global Variable: firstName', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'firstName',  'Jim' ) '}, DynamicContentReference{name='Global Variable: lastName', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'lastName',  'Raynor' ) '}, DynamicContentReference{name='Global Variable: gender', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'gender',  'm' ) '}, DynamicContentReference{name='Global Variable: shoppingItem', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'shoppingItem',  'Adler' ) '}, DynamicContentReference{name='Global Variable: numberOfNewLines', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'numberOfNewLines', 5) '}, Text{name='text', text='Sehr geehrter Herr '}, DynamicContentReference{name='Print: firstName', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'firstName')  '}, Text{name='text', text=' '}, DynamicContentReference{name='Print: lastName', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'lastName')  '}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='Wir danken Ihnen für Ihre Bestellung und bitten Sie um Ihre Zurkenntnisnahme:'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='Ihre Bestellung wird nicht ausgeführt.'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='3'}, Text{name='text', text='Aufwiederhören.'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='And so it ends.'}, Text{name='text', text=''}]}}", workspace.toString());
    }

    @Test
    public void testAssignments() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("Assignments"), "ISO8859_1");
        baustein = parser.CB();
        baustein.accept(merger);
        baustein.accept(blanksVisitor);
        baustein.accept(irTransformer);
        Workspace workspace = irTransformer.getWorkspace();
        assertNotNull(workspace);
        String probe = workspace.toString();
        assertEquals("Workspace{workspaceName='HitAssWorkspace', projectsName='HitAssProjects', projectName='HitAssProject', documentName='HitAssDocument', repeatingPageName='HitAssRepeatingPage', pageContentName='HitAssPageContent', contentContainer=Paragraph{contentElements=[Text{name='text', text='Here is some fixed text for you.'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, DynamicContentReference{name='Global Variable: myVar', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'myVar',  'John2' ) '}, DynamicContentReference{name='Assign from Userdata XML (oWL): quargl', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'quargl', /UserData/payload/line[@lineNr = hit2assext:getXmlSequence(var:read('renderSessionUuid'))]) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}, DynamicContentReference{name='Scalar Assignment: quargl', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'quargl',  'Speed'  )'}, DynamicContentReference{name='Scalar Assignment: varName', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'varName',  'For'  )'}, DynamicContentReference{name='Scalar Assignment: anotherVisitor', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'anotherVisitor',  'Need'  )'}, Text{name='text', text='This is the value of anotherVisitor: '}, DynamicContentReference{name='Print: anotherVisitor', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'anotherVisitor')  '}, Text{name='text', text=','}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='this is the value of varName: '}, DynamicContentReference{name='Print: varName', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'varName')  '}, Text{name='text', text=','}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='and this is the vlaue of quargl: '}, DynamicContentReference{name='Print: quargl', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'quargl')  '}, Text{name='text', text='.'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='Now, intitializing a list, setting slot values and retrieving slot values:'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, ListDeclaration{listVariableName='someNames', components='[]'}, ListAddItem{listVariableName='someNames', newValue=' 'John' ', components='[]'}, ListAddItem{listVariableName='someNames', newValue=' 'Joanne' ', components='[]'}, ListAddItem{listVariableName='someNames', newValue=' 'Eli' ', components='[]'}, Text{name='text', text='someNames[1]= '}, DynamicContentReference{name='Print: someNames', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'someNames', 1)'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='someNames[2]= '}, DynamicContentReference{name='Print: someNames', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'someNames', 2)'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='someNames[3|= '}, DynamicContentReference{name='Print: someNames', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'someNames', 3)'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='Now setting someNames[2] to Lisa'}, DynamicContentReference{name='List Assignment: someNames', xpath='hit2assext:setListValueAt(var:read('renderSessionUuid'), 'someNames', 2,  'Lisa' )'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='someNames[2]= '}, DynamicContentReference{name='Print: someNames', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'someNames', 2)'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}]}}", probe);
    }

    @Test
    public void testSubstring() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("Substring"), "ISO8859_1");
        baustein = parser.CB();
        baustein.accept(merger);
        baustein.accept(blanksVisitor);
        baustein.accept(irTransformer);
        Workspace workspace = irTransformer.getWorkspace();
        assertNotNull(workspace);
        String probe = workspace.toString();
        assertFalse(StringUtils.isBlank(probe));
        assertEquals("Workspace{workspaceName='HitAssWorkspace', projectsName='HitAssProjects', projectName='HitAssProject', documentName='HitAssDocument', repeatingPageName='HitAssRepeatingPage', pageContentName='HitAssPageContent', contentContainer=Paragraph{contentElements=[DynamicContentReference{name='Global Variable: myString', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'myString',  'Let freedom ring' ) '}, DynamicContentReference{name='Global Variable: mySubstring', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'mySubstring',  substring(hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'myString'), 5, 11 + 1 - 5 ) ) '}, Text{name='text', text='The substring [5,11] of \"'}, DynamicContentReference{name='Print: myString', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'myString')  '}, Text{name='text', text='\" is \"'}, DynamicContentReference{name='Print: mySubstring', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'mySubstring')  '}, Text{name='text', text='\".'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, IfThenElseParagraph{condition=BinaryOperatorExpression{codePosition=begin line/column 9/4; end line/column 9/14, lhs=IdExpression{id='mySubstring', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=EQ, rhs=TextExpression{codePosition=begin line/column 9/18; end line/column 9/26, value='freedom'}, value=null}, components=[IfThenParagraph{components=[Text{name='text', text='Hey, that worked!'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}]}, IfElseParagraph{components=[Text{name='text', text='OK, we will have to fix that.'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}]}]}, Text{name='text', text='And so it ends.'}, Text{name='text', text=''}]}}", probe);
    }

    @Test
    public void testWhile() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("While"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        baustein.accept(blanksVisitor);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/1; end line/column 4/5, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/1; end line/column 4/5, head=FixedTextImpl{codePosition=begin line/column 4/1; end line/column 4/5, textBuffer=Let's test away with the lelement WHILE-loop szenario!}, tail=PairClouBausteinElementList{codePosition=begin line/column 5/1; end line/column 5/2, head=HitCommandStatement{codePosition=begin line/column 5/1; end line/column 5/2, hitCommand=RETURN, repetitor=NumExpression{codePosition=begin line/column 5/3; end line/column 5/3, value=2}, verstarkt=false}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/4; end line/column 6/11, head=GlobalListDeclarationStatement{codePosition=begin line/column 6/4; end line/column 6/11, listId='indtext0', listExpression=null}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/13; end line/column 7/15, head=GlobalDeclarationStatement{codePosition=begin line/column 7/13; end line/column 7/15, expression=TextExpression{codePosition=begin line/column 7/13; end line/column 7/15, value='x'}, id='lelement', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/14; end line/column 9/15, head=GlobalDeclarationStatement{codePosition=begin line/column 9/14; end line/column 9/15, expression=TextExpression{codePosition=begin line/column 9/14; end line/column 9/15, value=''}, id='firstName', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/13; end line/column 10/14, head=GlobalDeclarationStatement{codePosition=begin line/column 10/13; end line/column 10/14, expression=TextExpression{codePosition=begin line/column 10/13; end line/column 10/14, value=''}, id='lastName', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 12/5; end line/column 12/13, head=DynamicValue{codePosition=begin line/column 12/5; end line/column 12/13, name='firstName'}, tail=PairClouBausteinElementList{codePosition=begin line/column 13/5; end line/column 13/12, head=DynamicValue{codePosition=begin line/column 13/5; end line/column 13/12, name='lastName'}, tail=PairClouBausteinElementList{codePosition=begin line/column 15/5; end line/column 15/12, head=DynamicValue{codePosition=begin line/column 15/5; end line/column 15/12, name='lelement'}, tail=PairClouBausteinElementList{codePosition=begin line/column 16/1; end line/column 16/2, head=WhileStatement{codePosition=begin line/column 16/1; end line/column 16/2, condition=BinaryOperatorExpression{codePosition=begin line/column 16/4; end line/column 16/11, lhs=IdExpression{id='lelement', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=NEQ, rhs=TextExpression{codePosition=begin line/column 16/16; end line/column 16/18, value='*'}, value=null}, whileBody=PairClouBausteinElementList{codePosition=begin line/column 17/8; end line/column 17/15, head=ListConcatenationStatement{codePosition=begin line/column 17/8; end line/column 17/15listId='indtext0', listExpression=LastExpressionList{codePosition=begin line/column 17/21; end line/column 17/28head='IdExpression{id='lelement', idxExp1=null, idxExp2=null, valueType=null, value=null}}}, tail=LastClouBausteinElementList{head=DynamicValue{codePosition=begin line/column 18/9; end line/column 18/16, name='lelement'}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 21/1; end line/column 21/4, head=FixedTextImpl{codePosition=begin line/column 21/1; end line/column 21/4, textBuffer=This is a message from }, tail=PairClouBausteinElementList{codePosition=begin line/column 21/27; end line/column 21/35, head=PrintStatement{codePosition=begin line/column 21/27; end line/column 21/35, idExpression='IdExpression{id='firstName', idxExp1=null, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 0/0; end line/column 0/0, head=FixedTextImpl{codePosition=begin line/column 0/0; end line/column 0/0, textBuffer= }, tail=PairClouBausteinElementList{codePosition=begin line/column 21/40; end line/column 21/47, head=PrintStatement{codePosition=begin line/column 21/40; end line/column 21/47, idExpression='IdExpression{id='lastName', idxExp1=null, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 21/48; end line/column 21/48, head=FixedTextImpl{codePosition=begin line/column 21/48; end line/column 21/48, textBuffer=:}, tail=PairClouBausteinElementList{codePosition=begin line/column 21/49; end line/column 21/49, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 22/1; end line/column 22/3, head=FixedTextImpl{codePosition=begin line/column 22/1; end line/column 22/3, textBuffer=And this is the date of the message:}, tail=PairClouBausteinElementList{codePosition=begin line/column 22/41; end line/column 22/46, head=DynamicValue{codePosition=begin line/column 22/41; end line/column 22/46, name='myDate'}, tail=PairClouBausteinElementList{codePosition=begin line/column 22/49; end line/column 22/54, head=PrintStatement{codePosition=begin line/column 22/49; end line/column 22/54, idExpression='IdExpression{id='myDate', idxExp1=null, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 22/55; end line/column 22/55, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 24/11; end line/column 24/17, head=GlobalDeclarationStatement{codePosition=begin line/column 24/11; end line/column 24/17, expression=ClouFunctionCall{codePosition=begin line/column 24/11; end line/column 24/17, functionName='listlen', args=LastExpressionList{codePosition=begin line/column 24/19; end line/column 24/28head='TextExpression{codePosition=begin line/column 24/19; end line/column 24/28, value='indtext0'}}}, id='length', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 25/1; end line/column 25/4, head=FixedTextImpl{codePosition=begin line/column 25/1; end line/column 25/4, textBuffer=Now, the length of this list should be 5, and it actually is }, tail=PairClouBausteinElementList{codePosition=begin line/column 25/65; end line/column 25/70, head=PrintStatement{codePosition=begin line/column 25/65; end line/column 25/70, idExpression='IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 25/71; end line/column 25/71, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 26/1; end line/column 26/3, head=FixedTextImpl{codePosition=begin line/column 26/1; end line/column 26/3, textBuffer=And these are the values found in the user data XML:}, tail=PairClouBausteinElementList{codePosition=begin line/column 26/53; end line/column 26/53, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 27/1; end line/column 27/12, head=FixedTextImpl{codePosition=begin line/column 27/1; end line/column 27/12, textBuffer=indtext0[1]= }, tail=PairClouBausteinElementList{codePosition=begin line/column 27/15; end line/column 27/22, head=PrintStatement{codePosition=begin line/column 27/15; end line/column 27/22, idExpression='IdExpression{id='indtext0', idxExp1=LastExpressionList{codePosition=begin line/column 27/24; end line/column 27/24head='NumExpression{codePosition=begin line/column 27/24; end line/column 27/24, value=1}}, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 27/26; end line/column 27/26, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 28/1; end line/column 28/12, head=FixedTextImpl{codePosition=begin line/column 28/1; end line/column 28/12, textBuffer=indtext0[2]= }, tail=PairClouBausteinElementList{codePosition=begin line/column 28/15; end line/column 28/22, head=PrintStatement{codePosition=begin line/column 28/15; end line/column 28/22, idExpression='IdExpression{id='indtext0', idxExp1=LastExpressionList{codePosition=begin line/column 28/24; end line/column 28/24head='NumExpression{codePosition=begin line/column 28/24; end line/column 28/24, value=2}}, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 28/26; end line/column 28/26, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 29/1; end line/column 29/12, head=FixedTextImpl{codePosition=begin line/column 29/1; end line/column 29/12, textBuffer=indtext0[3]= }, tail=PairClouBausteinElementList{codePosition=begin line/column 29/15; end line/column 29/22, head=PrintStatement{codePosition=begin line/column 29/15; end line/column 29/22, idExpression='IdExpression{id='indtext0', idxExp1=LastExpressionList{codePosition=begin line/column 29/24; end line/column 29/24head='NumExpression{codePosition=begin line/column 29/24; end line/column 29/24, value=3}}, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 29/26; end line/column 29/26, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 30/1; end line/column 30/12, head=FixedTextImpl{codePosition=begin line/column 30/1; end line/column 30/12, textBuffer=indtext0[4]= }, tail=PairClouBausteinElementList{codePosition=begin line/column 30/15; end line/column 30/22, head=PrintStatement{codePosition=begin line/column 30/15; end line/column 30/22, idExpression='IdExpression{id='indtext0', idxExp1=LastExpressionList{codePosition=begin line/column 30/24; end line/column 30/24head='NumExpression{codePosition=begin line/column 30/24; end line/column 30/24, value=4}}, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 30/26; end line/column 30/26, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 31/1; end line/column 31/12, head=FixedTextImpl{codePosition=begin line/column 31/1; end line/column 31/12, textBuffer=indtext0[5]= }, tail=PairClouBausteinElementList{codePosition=begin line/column 31/15; end line/column 31/22, head=PrintStatement{codePosition=begin line/column 31/15; end line/column 31/22, idExpression='IdExpression{id='indtext0', idxExp1=LastExpressionList{codePosition=begin line/column 31/24; end line/column 31/24head='NumExpression{codePosition=begin line/column 31/24; end line/column 31/24, value=5}}, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 31/26; end line/column 31/26, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 32/1; end line/column 32/4, head=FixedTextImpl{codePosition=begin line/column 32/1; end line/column 32/4, textBuffer=grin}, tail=PairClouBausteinElementList{codePosition=begin line/column 33/1; end line/column 33/2, head=HitCommandStatement{codePosition=begin line/column 33/1; end line/column 33/2, hitCommand=RETURN, repetitor=NumExpression{codePosition=begin line/column 33/3; end line/column 33/3, value=2}, verstarkt=false}, tail=PairClouBausteinElementList{codePosition=begin line/column 35/1; end line/column 35/3, head=FixedTextImpl{codePosition=begin line/column 35/1; end line/column 35/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 35/11; end line/column 35/15, textBuffer=}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", probe);
        baustein.accept(irTransformer);
        Workspace workspace = irTransformer.getWorkspace();
        assertNotNull(workspace);
        probe = workspace.toString();
        assertFalse(StringUtils.isBlank(probe));
        assertEquals("Workspace{workspaceName='HitAssWorkspace', projectsName='HitAssProjects', projectName='HitAssProject', documentName='HitAssDocument', repeatingPageName='HitAssRepeatingPage', pageContentName='HitAssPageContent', contentContainer=Paragraph{contentElements=[Text{name='text', text='Let's test away with the lelement WHILE-loop szenario!'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='2'}, ListDeclaration{listVariableName='indtext0', components='[]'}, DynamicContentReference{name='Global Variable: lelement', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'lelement',  'x' ) '}, DynamicContentReference{name='Global Variable: firstName', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'firstName',  '' ) '}, DynamicContentReference{name='Global Variable: lastName', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'lastName',  '' ) '}, DynamicContentReference{name='Assign from Userdata XML (oWL): firstName', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'firstName', /UserData/payload/line[@lineNr = hit2assext:getXmlSequence(var:read('renderSessionUuid'))]) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}, DynamicContentReference{name='Assign from Userdata XML (oWL): lastName', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'lastName', /UserData/payload/line[@lineNr = hit2assext:getXmlSequence(var:read('renderSessionUuid'))]) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}, DynamicContentReference{name='Assign from Userdata XML (oWL): lelement', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'lelement', /UserData/payload/line[@lineNr = hit2assext:getXmlSequence(var:read('renderSessionUuid'))]) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}, WhileLoopFlagValueFlavor{expression=BinaryOperatorExpression{codePosition=begin line/column 16/4; end line/column 16/11, lhs=IdExpression{id='lelement', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=NEQ, rhs=TextExpression{codePosition=begin line/column 16/16; end line/column 16/18, value='*'}, value=null}, components=[DynamicContentReference{name='ListConcat: indtext0: hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'lelement')  ', xpath=' hit2assext:addListValue(var:read('renderSessionUuid'), 'indtext0',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'lelement')  ) '}, DynamicContentReference{name='Assign from Userdata XML (iWL): lelement', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'lelement', ./. ) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}]}, Text{name='text', text='This is a message from '}, DynamicContentReference{name='Print: firstName', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'firstName')  '}, Text{name='text', text=' '}, DynamicContentReference{name='Print: lastName', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'lastName')  '}, Text{name='text', text=':'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='And this is the date of the message:'}, DynamicContentReference{name='Assign from Userdata XML (oWL): myDate', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'myDate', /UserData/payload/line[@lineNr = hit2assext:getXmlSequence(var:read('renderSessionUuid'))]) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}, DynamicContentReference{name='Print: myDate', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'myDate')  '}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, DynamicContentReference{name='Global Variable: length', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'length',  hit2assext:getListLength(var:read('renderSessionUuid'),  'indtext0' ) ) '}, Text{name='text', text='Now, the length of this list should be 5, and it actually is '}, DynamicContentReference{name='Print: length', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'length')  '}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='And these are the values found in the user data XML:'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='indtext0[1]= '}, DynamicContentReference{name='Print: indtext0', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'indtext0', 1)'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='indtext0[2]= '}, DynamicContentReference{name='Print: indtext0', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'indtext0', 2)'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='indtext0[3]= '}, DynamicContentReference{name='Print: indtext0', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'indtext0', 3)'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='indtext0[4]= '}, DynamicContentReference{name='Print: indtext0', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'indtext0', 4)'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='indtext0[5]= '}, DynamicContentReference{name='Print: indtext0', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'indtext0', 5)'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='grin'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='2'}, Text{name='text', text='And so it ends.'}, Text{name='text', text=''}]}}", probe);
        workspace.getContent();
    }

    @Test
    public void testWhileLoopForFlavor() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("WhileLoopForFlavor"), "ISO8859_1");
        baustein = parser.CB();
        baustein.accept(merger);
        baustein.accept(blanksVisitor);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 5/1; end line/column 5/5, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 5/1; end line/column 5/5, head=FixedTextImpl{codePosition=begin line/column 5/1; end line/column 5/5, textBuffer=Let's test for-flavored WHILE loops, right away.}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/1; end line/column 6/2, head=HitCommandStatement{codePosition=begin line/column 6/1; end line/column 6/2, hitCommand=RETURN, repetitor=NumExpression{codePosition=begin line/column 6/3; end line/column 6/3, value=2}, verstarkt=false}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/4; end line/column 9/10, head=GlobalListDeclarationStatement{codePosition=begin line/column 9/4; end line/column 9/10, listId='indtext', listExpression=PairExpressionList{head=TextExpression{codePosition=begin line/column 9/16; end line/column 9/21, value='Wont'}, tail=PairExpressionList{head=TextExpression{codePosition=begin line/column 9/24; end line/column 9/28, value='see'}, tail=PairExpressionList{head=TextExpression{codePosition=begin line/column 9/31; end line/column 9/35, value='the'}, tail=PairExpressionList{head=TextExpression{codePosition=begin line/column 9/38; end line/column 9/42, value='end'}, tail=PairExpressionList{head=TextExpression{codePosition=begin line/column 9/45; end line/column 9/48, value='of'}, tail=LastExpressionList{codePosition=begin line/column 9/51; end line/column 9/57head='TextExpression{codePosition=begin line/column 9/51; end line/column 9/57, value='this.'}}}}}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/12; end line/column 10/12, head=GlobalDeclarationStatement{codePosition=begin line/column 10/12; end line/column 10/12, expression=NumExpression{codePosition=begin line/column 10/12; end line/column 10/12, value=1}, id='listind', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 12/4; end line/column 12/10, head=AssignmentStatement{codePosition=begin line/column 12/4; end line/column 12/10, idExpression='IdExpression{id='listind', idxExp1=null, idxExp2=null, valueType=null, value=null}', expression=NumExpression{codePosition=begin line/column 12/12; end line/column 12/12, value=1}}, tail=PairClouBausteinElementList{codePosition=begin line/column 14/1; end line/column 14/2, head=WhileStatement{codePosition=begin line/column 14/1; end line/column 14/2, condition=BinaryOperatorExpression{codePosition=begin line/column 14/4; end line/column 14/10, lhs=IdExpression{id='listind', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=LTE, rhs=ClouFunctionCall{codePosition=begin line/column 14/15; end line/column 14/21, functionName='listlen', args=LastExpressionList{codePosition=begin line/column 14/23; end line/column 14/31head='TextExpression{codePosition=begin line/column 14/23; end line/column 14/31, value='indtext'}}}, value=null}, whileBody=PairClouBausteinElementList{codePosition=begin line/column 15/8; end line/column 15/14, head=PrintStatement{codePosition=begin line/column 15/8; end line/column 15/14, idExpression='IdExpression{id='indtext', idxExp1=LastExpressionList{codePosition=begin line/column 15/16; end line/column 15/22head='IdExpression{id='listind', idxExp1=null, idxExp2=null, valueType=null, value=null}}, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 15/24; end line/column 15/24, head=SectionStatement{}, tail=LastClouBausteinElementList{head=AssignmentStatement{codePosition=begin line/column 16/8; end line/column 16/14, idExpression='IdExpression{id='listind', idxExp1=null, idxExp2=null, valueType=null, value=null}', expression=BinaryOperatorExpression{codePosition=begin line/column 16/16; end line/column 16/22, lhs=IdExpression{id='listind', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=PLUS, rhs=NumExpression{codePosition=begin line/column 16/26; end line/column 16/26, value=1}, value=null}}}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 19/1; end line/column 19/3, head=FixedTextImpl{codePosition=begin line/column 19/1; end line/column 19/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 19/11; end line/column 19/15, textBuffer=}}}}}}}}}}", probe);
        baustein.accept(irTransformer);
        Workspace workspace = irTransformer.getWorkspace();
        assertNotNull(workspace);
        probe = workspace.toString();
        assertFalse(StringUtils.isBlank(probe));
        assertEquals("Workspace{workspaceName='HitAssWorkspace', projectsName='HitAssProjects', projectName='HitAssProject', documentName='HitAssDocument', repeatingPageName='HitAssRepeatingPage', pageContentName='HitAssPageContent', contentContainer=Paragraph{contentElements=[Text{name='text', text='Let's test for-flavored WHILE loops, right away.'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='2'}, ListDeclaration{listVariableName='indtext', components='[]'}, ListAddItem{listVariableName='indtext', newValue=' 'Wont' ', components='[]'}, ListAddItem{listVariableName='indtext', newValue=' 'see' ', components='[]'}, ListAddItem{listVariableName='indtext', newValue=' 'the' ', components='[]'}, ListAddItem{listVariableName='indtext', newValue=' 'end' ', components='[]'}, ListAddItem{listVariableName='indtext', newValue=' 'of' ', components='[]'}, ListAddItem{listVariableName='indtext', newValue=' 'this.' ', components='[]'}, DynamicContentReference{name='Global Variable: listind', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'listind', 1) '}, DynamicContentReference{name='Scalar Assignment: listind', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'listind', 1 )'}, ForLoop{expression=BinaryOperatorExpression{codePosition=begin line/column 0/0; end line/column 0/0, lhs=NumExpression{codePosition=begin line/column 0/0; end line/column 0/0, value=1}, operator=PLUS, rhs=BinaryOperatorExpression{codePosition=begin line/column 0/0; end line/column 0/0, lhs=ClouFunctionCall{codePosition=begin line/column 14/15; end line/column 14/21, functionName='listlen', args=LastExpressionList{codePosition=begin line/column 14/23; end line/column 14/31head='TextExpression{codePosition=begin line/column 14/23; end line/column 14/31, value='indtext'}}}, operator=MINUS, rhs=IdExpression{id='listind', idxExp1=null, idxExp2=null, valueType=null, value=null}, value=null}, value=null}, components=[DynamicContentReference{name='Print: indtext', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'indtext',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'listind')  )'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, DynamicContentReference{name='Scalar Assignment: listind', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'listind',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'listind')   + 1 )'}]}, Text{name='text', text='And so it ends.'}, Text{name='text', text=''}]}}", probe);
        workspace.getContent();
    }

    @Test
    public void testListDeclarationFromList() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("ListDeclarationFromList"), "ISO8859_1");
        baustein = parser.CB();
        baustein.accept(merger);
        baustein.accept(blanksVisitor);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/11; end line/column 4/11, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/11; end line/column 4/11, head=GlobalDeclarationStatement{codePosition=begin line/column 4/11; end line/column 4/11, expression=NumExpression{codePosition=begin line/column 4/11; end line/column 4/11, value=0}, id='length', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 5/12; end line/column 5/12, head=GlobalDeclarationStatement{codePosition=begin line/column 5/12; end line/column 5/12, expression=NumExpression{codePosition=begin line/column 5/12; end line/column 5/12, value=1}, id='counter', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/1; end line/column 7/12, head=FixedTextImpl{codePosition=begin line/column 7/1; end line/column 7/12, textBuffer=Initializing liste99 D { 1, 2, 3, 4, 5 }}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/42; end line/column 7/42, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/4; end line/column 8/10, head=GlobalListDeclarationStatement{codePosition=begin line/column 8/4; end line/column 8/10, listId='liste99', listExpression=PairExpressionList{head=NumExpression{codePosition=begin line/column 8/16; end line/column 8/16, value=1}, tail=PairExpressionList{head=NumExpression{codePosition=begin line/column 8/19; end line/column 8/19, value=2}, tail=PairExpressionList{head=NumExpression{codePosition=begin line/column 8/22; end line/column 8/22, value=3}, tail=PairExpressionList{head=NumExpression{codePosition=begin line/column 8/25; end line/column 8/25, value=4}, tail=LastExpressionList{codePosition=begin line/column 8/28; end line/column 8/28head='NumExpression{codePosition=begin line/column 8/28; end line/column 8/28, value=5}}}}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/4; end line/column 9/9, head=AssignmentStatement{codePosition=begin line/column 9/4; end line/column 9/9, idExpression='IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}', expression=ClouFunctionCall{codePosition=begin line/column 9/11; end line/column 9/17, functionName='listlen', args=LastExpressionList{codePosition=begin line/column 9/19; end line/column 9/27head='TextExpression{codePosition=begin line/column 9/19; end line/column 9/27, value='liste99'}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/1; end line/column 10/7, head=FixedTextImpl{codePosition=begin line/column 10/1; end line/column 10/7, textBuffer=liste99 should have 5 elements, and in fact it has these }, tail=PairClouBausteinElementList{codePosition=begin line/column 10/61; end line/column 10/66, head=PrintStatement{codePosition=begin line/column 10/61; end line/column 10/66, idExpression='IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/68; end line/column 10/76, head=FixedTextImpl{codePosition=begin line/column 10/68; end line/column 10/76, textBuffer= elements:}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/77; end line/column 10/77, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 11/12; end line/column 11/12, head=GlobalDeclarationStatement{codePosition=begin line/column 11/12; end line/column 11/12, expression=NumExpression{codePosition=begin line/column 11/12; end line/column 11/12, value=1}, id='counter', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 12/4; end line/column 12/9, head=ForStatement{repetitionCount=IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}, forBody=PairClouBausteinElementList{codePosition=begin line/column 13/8; end line/column 13/14, head=PrintStatement{codePosition=begin line/column 13/8; end line/column 13/14, idExpression='IdExpression{id='liste99', idxExp1=LastExpressionList{codePosition=begin line/column 13/16; end line/column 13/22head='IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}}, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 13/24; end line/column 13/24, head=SectionStatement{}, tail=LastClouBausteinElementList{head=AssignmentStatement{codePosition=begin line/column 14/8; end line/column 14/14, idExpression='IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}', expression=BinaryOperatorExpression{codePosition=begin line/column 14/16; end line/column 14/22, lhs=IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=PLUS, rhs=NumExpression{codePosition=begin line/column 14/26; end line/column 14/26, value=1}, value=null}}}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 17/1; end line/column 17/12, head=FixedTextImpl{codePosition=begin line/column 17/1; end line/column 17/12, textBuffer=Initializing liste98 d { \"Hello, \", \"World!\", \" argl \" }}, tail=PairClouBausteinElementList{codePosition=begin line/column 17/57; end line/column 17/57, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 18/4; end line/column 18/10, head=LocalListDeclarationStatement{codePosition=begin line/column 18/4; end line/column 18/10listId='liste98', listExpression=PairExpressionList{head=TextExpression{codePosition=begin line/column 18/16; end line/column 18/24, value='Hello, '}, tail=PairExpressionList{head=TextExpression{codePosition=begin line/column 18/27; end line/column 18/34, value='World!'}, tail=LastExpressionList{codePosition=begin line/column 18/37; end line/column 18/44head='TextExpression{codePosition=begin line/column 18/37; end line/column 18/44, value=' argl '}}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 19/4; end line/column 19/9, head=AssignmentStatement{codePosition=begin line/column 19/4; end line/column 19/9, idExpression='IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}', expression=ClouFunctionCall{codePosition=begin line/column 19/11; end line/column 19/17, functionName='listlen', args=LastExpressionList{codePosition=begin line/column 19/19; end line/column 19/27head='TextExpression{codePosition=begin line/column 19/19; end line/column 19/27, value='liste98'}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 20/1; end line/column 20/7, head=FixedTextImpl{codePosition=begin line/column 20/1; end line/column 20/7, textBuffer=liste98 should have 3 elements, and in fact it has these }, tail=PairClouBausteinElementList{codePosition=begin line/column 20/61; end line/column 20/66, head=PrintStatement{codePosition=begin line/column 20/61; end line/column 20/66, idExpression='IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 20/68; end line/column 20/76, head=FixedTextImpl{codePosition=begin line/column 20/68; end line/column 20/76, textBuffer= elements:}, tail=PairClouBausteinElementList{codePosition=begin line/column 20/77; end line/column 20/77, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 21/12; end line/column 21/12, head=GlobalDeclarationStatement{codePosition=begin line/column 21/12; end line/column 21/12, expression=NumExpression{codePosition=begin line/column 21/12; end line/column 21/12, value=1}, id='counter', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 22/4; end line/column 22/9, head=ForStatement{repetitionCount=IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}, forBody=PairClouBausteinElementList{codePosition=begin line/column 23/8; end line/column 23/14, head=PrintStatement{codePosition=begin line/column 23/8; end line/column 23/14, idExpression='IdExpression{id='liste98', idxExp1=LastExpressionList{codePosition=begin line/column 23/16; end line/column 23/22head='IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}}, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 23/24; end line/column 23/24, head=SectionStatement{}, tail=LastClouBausteinElementList{head=AssignmentStatement{codePosition=begin line/column 24/8; end line/column 24/14, idExpression='IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}', expression=BinaryOperatorExpression{codePosition=begin line/column 24/16; end line/column 24/22, lhs=IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=PLUS, rhs=NumExpression{codePosition=begin line/column 24/26; end line/column 24/26, value=1}, value=null}}}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 27/1; end line/column 27/12, head=FixedTextImpl{codePosition=begin line/column 27/1; end line/column 27/12, textBuffer=Initializing liste97 D liste99 & liste98 & { \"argl\" }}, tail=PairClouBausteinElementList{codePosition=begin line/column 27/54; end line/column 27/54, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 28/4; end line/column 28/10, head=GlobalListDeclarationStatement{codePosition=begin line/column 28/4; end line/column 28/10, listId='liste97', listExpression=BinaryOperatorExpression{codePosition=begin line/column 28/14; end line/column 28/20, lhs=IdExpression{id='liste99', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=AND, rhs=BinaryOperatorExpression{codePosition=begin line/column 28/24; end line/column 28/30, lhs=IdExpression{id='liste98', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=AND, rhs=LastExpressionList{codePosition=begin line/column 28/36; end line/column 28/41head='TextExpression{codePosition=begin line/column 28/36; end line/column 28/41, value='argl'}}, value=null}, value=null}}, tail=PairClouBausteinElementList{codePosition=begin line/column 29/4; end line/column 29/9, head=AssignmentStatement{codePosition=begin line/column 29/4; end line/column 29/9, idExpression='IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}', expression=ClouFunctionCall{codePosition=begin line/column 29/11; end line/column 29/17, functionName='listlen', args=LastExpressionList{codePosition=begin line/column 29/19; end line/column 29/27head='TextExpression{codePosition=begin line/column 29/19; end line/column 29/27, value='liste97'}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 30/1; end line/column 30/7, head=FixedTextImpl{codePosition=begin line/column 30/1; end line/column 30/7, textBuffer=liste97 should have 9 elements, and in fact it has these }, tail=PairClouBausteinElementList{codePosition=begin line/column 30/61; end line/column 30/66, head=PrintStatement{codePosition=begin line/column 30/61; end line/column 30/66, idExpression='IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 30/68; end line/column 30/76, head=FixedTextImpl{codePosition=begin line/column 30/68; end line/column 30/76, textBuffer= elements:}, tail=PairClouBausteinElementList{codePosition=begin line/column 30/77; end line/column 30/77, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 31/12; end line/column 31/12, head=GlobalDeclarationStatement{codePosition=begin line/column 31/12; end line/column 31/12, expression=NumExpression{codePosition=begin line/column 31/12; end line/column 31/12, value=1}, id='counter', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 32/4; end line/column 32/9, head=ForStatement{repetitionCount=IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}, forBody=PairClouBausteinElementList{codePosition=begin line/column 33/8; end line/column 33/14, head=PrintStatement{codePosition=begin line/column 33/8; end line/column 33/14, idExpression='IdExpression{id='liste97', idxExp1=LastExpressionList{codePosition=begin line/column 33/16; end line/column 33/22head='IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}}, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 33/24; end line/column 33/24, head=SectionStatement{}, tail=LastClouBausteinElementList{head=AssignmentStatement{codePosition=begin line/column 34/8; end line/column 34/14, idExpression='IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}', expression=BinaryOperatorExpression{codePosition=begin line/column 34/16; end line/column 34/22, lhs=IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=PLUS, rhs=NumExpression{codePosition=begin line/column 34/26; end line/column 34/26, value=1}, value=null}}}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 37/1; end line/column 37/12, head=FixedTextImpl{codePosition=begin line/column 37/1; end line/column 37/12, textBuffer=Initializing liste99}, tail=PairClouBausteinElementList{codePosition=begin line/column 38/4; end line/column 38/15, head=GlobalListDeclarationStatement{codePosition=begin line/column 38/4; end line/column 38/15, listId='listFromList', listExpression=IdExpression{id='liste99', idxExp1=null, idxExp2=null, valueType=null, value=null}}, tail=PairClouBausteinElementList{codePosition=begin line/column 39/4; end line/column 39/9, head=AssignmentStatement{codePosition=begin line/column 39/4; end line/column 39/9, idExpression='IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}', expression=ClouFunctionCall{codePosition=begin line/column 39/11; end line/column 39/17, functionName='listlen', args=LastExpressionList{codePosition=begin line/column 39/19; end line/column 39/32head='TextExpression{codePosition=begin line/column 39/19; end line/column 39/32, value='listFromList'}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 40/1; end line/column 40/12, head=FixedTextImpl{codePosition=begin line/column 40/1; end line/column 40/12, textBuffer=listFromList should have 5 elements, and in fact it has these }, tail=PairClouBausteinElementList{codePosition=begin line/column 40/66; end line/column 40/71, head=PrintStatement{codePosition=begin line/column 40/66; end line/column 40/71, idExpression='IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 40/73; end line/column 40/81, head=FixedTextImpl{codePosition=begin line/column 40/73; end line/column 40/81, textBuffer= elements:}, tail=PairClouBausteinElementList{codePosition=begin line/column 40/82; end line/column 40/82, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 41/4; end line/column 41/10, head=AssignmentStatement{codePosition=begin line/column 41/4; end line/column 41/10, idExpression='IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}', expression=NumExpression{codePosition=begin line/column 41/12; end line/column 41/12, value=1}}, tail=PairClouBausteinElementList{codePosition=begin line/column 42/4; end line/column 42/9, head=ForStatement{repetitionCount=IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}, forBody=PairClouBausteinElementList{codePosition=begin line/column 43/8; end line/column 43/19, head=PrintStatement{codePosition=begin line/column 43/8; end line/column 43/19, idExpression='IdExpression{id='listFromList', idxExp1=LastExpressionList{codePosition=begin line/column 43/21; end line/column 43/27head='IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}}, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 43/29; end line/column 43/29, head=SectionStatement{}, tail=LastClouBausteinElementList{head=AssignmentStatement{codePosition=begin line/column 44/8; end line/column 44/14, idExpression='IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}', expression=BinaryOperatorExpression{codePosition=begin line/column 44/16; end line/column 44/22, lhs=IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=PLUS, rhs=NumExpression{codePosition=begin line/column 44/26; end line/column 44/26, value=1}, value=null}}}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 47/1; end line/column 47/3, head=FixedTextImpl{codePosition=begin line/column 47/1; end line/column 47/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 47/11; end line/column 47/15, textBuffer=}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", probe);
        baustein.accept(irTransformer);
        Workspace workspace = irTransformer.getWorkspace();
        assertNotNull(workspace);
        probe = workspace.toString();
        assertFalse(StringUtils.isBlank(probe));
        assertEquals("Workspace{workspaceName='HitAssWorkspace', projectsName='HitAssProjects', projectName='HitAssProject', documentName='HitAssDocument', repeatingPageName='HitAssRepeatingPage', pageContentName='HitAssPageContent', contentContainer=Paragraph{contentElements=[DynamicContentReference{name='Global Variable: length', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'length', 0) '}, DynamicContentReference{name='Global Variable: counter', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'counter', 1) '}, Text{name='text', text='Initializing liste99 D { 1, 2, 3, 4, 5 }'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, ListDeclaration{listVariableName='liste99', components='[]'}, ListAddItem{listVariableName='liste99', newValue='1', components='[]'}, ListAddItem{listVariableName='liste99', newValue='2', components='[]'}, ListAddItem{listVariableName='liste99', newValue='3', components='[]'}, ListAddItem{listVariableName='liste99', newValue='4', components='[]'}, ListAddItem{listVariableName='liste99', newValue='5', components='[]'}, DynamicContentReference{name='Scalar Assignment: length', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'length',  hit2assext:getListLength(var:read('renderSessionUuid'),  'liste99' )  )'}, Text{name='text', text='liste99 should have 5 elements, and in fact it has these '}, DynamicContentReference{name='Print: length', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'length')  '}, Text{name='text', text=' elements:'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, DynamicContentReference{name='Global Variable: counter', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'counter', 1) '}, ForLoop{expression=IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}, components=[DynamicContentReference{name='Print: liste99', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'liste99',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'counter')  )'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, DynamicContentReference{name='Scalar Assignment: counter', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'counter',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'counter')   + 1 )'}]}, Text{name='text', text='Initializing liste98 d { \"Hello, \", \"World!\", \" argl \" }'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, ListDeclaration{listVariableName='liste98', components='[]'}, ListAddItem{listVariableName='liste98', newValue=' 'Hello, ' ', components='[]'}, ListAddItem{listVariableName='liste98', newValue=' 'World!' ', components='[]'}, ListAddItem{listVariableName='liste98', newValue=' ' argl ' ', components='[]'}, DynamicContentReference{name='Scalar Assignment: length', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'length',  hit2assext:getListLength(var:read('renderSessionUuid'),  'liste98' )  )'}, Text{name='text', text='liste98 should have 3 elements, and in fact it has these '}, DynamicContentReference{name='Print: length', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'length')  '}, Text{name='text', text=' elements:'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, DynamicContentReference{name='Global Variable: counter', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'counter', 1) '}, ForLoop{expression=IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}, components=[DynamicContentReference{name='Print: liste98', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'liste98',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'counter')  )'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, DynamicContentReference{name='Scalar Assignment: counter', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'counter',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'counter')   + 1 )'}]}, Text{name='text', text='Initializing liste97 D liste99 & liste98 & { \"argl\" }'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, ListDeclaration{listVariableName='liste97', components='[]'}, DynamicContentReference{name='Scalar Assignment: length', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'length',  hit2assext:getListLength(var:read('renderSessionUuid'),  'liste97' )  )'}, Text{name='text', text='liste97 should have 9 elements, and in fact it has these '}, DynamicContentReference{name='Print: length', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'length')  '}, Text{name='text', text=' elements:'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, DynamicContentReference{name='Global Variable: counter', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'counter', 1) '}, ForLoop{expression=IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}, components=[DynamicContentReference{name='Print: liste97', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'liste97',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'counter')  )'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, DynamicContentReference{name='Scalar Assignment: counter', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'counter',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'counter')   + 1 )'}]}, Text{name='text', text='Initializing liste99'}, ListDeclaration{listVariableName='listFromList', components='[]'}, DynamicContentReference{name='Scalar Assignment: length', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'length',  hit2assext:getListLength(var:read('renderSessionUuid'),  'listFromList' )  )'}, Text{name='text', text='listFromList should have 5 elements, and in fact it has these '}, DynamicContentReference{name='Print: length', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'length')  '}, Text{name='text', text=' elements:'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, DynamicContentReference{name='Scalar Assignment: counter', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'counter', 1 )'}, ForLoop{expression=IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}, components=[DynamicContentReference{name='Print: listFromList', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'listFromList',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'counter')  )'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, DynamicContentReference{name='Scalar Assignment: counter', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'counter',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'counter')   + 1 )'}]}, Text{name='text', text='And so it ends.'}, Text{name='text', text=''}]}}", probe);
        workspace.getContent();
    }

    @Test
    public void testWhileAndFor() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("WhileAndFor"), "ISO8859_1");
        baustein = parser.CB();
        baustein.accept(merger);
        baustein.accept(blanksVisitor);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 5/1; end line/column 5/5, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 5/1; end line/column 5/5, head=FixedTextImpl{codePosition=begin line/column 5/1; end line/column 5/5, textBuffer=Let's test away with the lelement WHILE-loop szenario!}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/1; end line/column 6/2, head=HitCommandStatement{codePosition=begin line/column 6/1; end line/column 6/2, hitCommand=RETURN, repetitor=NumExpression{codePosition=begin line/column 6/3; end line/column 6/3, value=2}, verstarkt=false}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/4; end line/column 7/11, head=GlobalListDeclarationStatement{codePosition=begin line/column 7/4; end line/column 7/11, listId='indtext0', listExpression=null}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/13; end line/column 8/15, head=GlobalDeclarationStatement{codePosition=begin line/column 8/13; end line/column 8/15, expression=TextExpression{codePosition=begin line/column 8/13; end line/column 8/15, value='x'}, id='lelement', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/14; end line/column 10/15, head=GlobalDeclarationStatement{codePosition=begin line/column 10/14; end line/column 10/15, expression=TextExpression{codePosition=begin line/column 10/14; end line/column 10/15, value=''}, id='firstName', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 11/13; end line/column 11/14, head=GlobalDeclarationStatement{codePosition=begin line/column 11/13; end line/column 11/14, expression=TextExpression{codePosition=begin line/column 11/13; end line/column 11/14, value=''}, id='lastName', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 13/5; end line/column 13/13, head=DynamicValue{codePosition=begin line/column 13/5; end line/column 13/13, name='firstName'}, tail=PairClouBausteinElementList{codePosition=begin line/column 14/5; end line/column 14/12, head=DynamicValue{codePosition=begin line/column 14/5; end line/column 14/12, name='lastName'}, tail=PairClouBausteinElementList{codePosition=begin line/column 16/1; end line/column 16/5, head=FixedTextImpl{codePosition=begin line/column 16/1; end line/column 16/5, textBuffer=Hello }, tail=PairClouBausteinElementList{codePosition=begin line/column 16/10; end line/column 16/18, head=PrintStatement{codePosition=begin line/column 16/10; end line/column 16/18, idExpression='IdExpression{id='firstName', idxExp1=null, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 0/0; end line/column 0/0, head=FixedTextImpl{codePosition=begin line/column 0/0; end line/column 0/0, textBuffer= }, tail=PairClouBausteinElementList{codePosition=begin line/column 16/23; end line/column 16/30, head=PrintStatement{codePosition=begin line/column 16/23; end line/column 16/30, idExpression='IdExpression{id='lastName', idxExp1=null, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 16/31; end line/column 16/31, head=FixedTextImpl{codePosition=begin line/column 16/31; end line/column 16/31, textBuffer=,}, tail=PairClouBausteinElementList{codePosition=begin line/column 16/32; end line/column 16/32, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 17/1; end line/column 17/4, head=FixedTextImpl{codePosition=begin line/column 17/1; end line/column 17/4, textBuffer=here comes your list:}, tail=PairClouBausteinElementList{codePosition=begin line/column 17/22; end line/column 17/22, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 17/23; end line/column 17/23, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 18/5; end line/column 18/12, head=DynamicValue{codePosition=begin line/column 18/5; end line/column 18/12, name='lelement'}, tail=PairClouBausteinElementList{codePosition=begin line/column 19/1; end line/column 19/2, head=WhileStatement{codePosition=begin line/column 19/1; end line/column 19/2, condition=BinaryOperatorExpression{codePosition=begin line/column 19/4; end line/column 19/11, lhs=IdExpression{id='lelement', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=NEQ, rhs=TextExpression{codePosition=begin line/column 19/16; end line/column 19/18, value='*'}, value=null}, whileBody=PairClouBausteinElementList{codePosition=begin line/column 20/8; end line/column 20/15, head=ListConcatenationStatement{codePosition=begin line/column 20/8; end line/column 20/15listId='indtext0', listExpression=LastExpressionList{codePosition=begin line/column 20/21; end line/column 20/28head='IdExpression{id='lelement', idxExp1=null, idxExp2=null, valueType=null, value=null}}}, tail=LastClouBausteinElementList{head=DynamicValue{codePosition=begin line/column 21/9; end line/column 21/16, name='lelement'}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 24/12; end line/column 24/12, head=GlobalDeclarationStatement{codePosition=begin line/column 24/12; end line/column 24/12, expression=NumExpression{codePosition=begin line/column 24/12; end line/column 24/12, value=1}, id='counter', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 25/4; end line/column 25/10, head=ForStatement{repetitionCount=ClouFunctionCall{codePosition=begin line/column 25/4; end line/column 25/10, functionName='listlen', args=LastExpressionList{codePosition=begin line/column 25/12; end line/column 25/21head='TextExpression{codePosition=begin line/column 25/12; end line/column 25/21, value='indtext0'}}}, forBody=PairClouBausteinElementList{codePosition=begin line/column 26/8; end line/column 26/15, head=PrintStatement{codePosition=begin line/column 26/8; end line/column 26/15, idExpression='IdExpression{id='indtext0', idxExp1=LastExpressionList{codePosition=begin line/column 26/17; end line/column 26/23head='IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}}, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 27/8; end line/column 27/14, head=AssignmentStatement{codePosition=begin line/column 27/8; end line/column 27/14, idExpression='IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}', expression=BinaryOperatorExpression{codePosition=begin line/column 27/16; end line/column 27/22, lhs=IdExpression{id='counter', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=PLUS, rhs=NumExpression{codePosition=begin line/column 27/26; end line/column 27/26, value=1}, value=null}}, tail=LastClouBausteinElementList{head=SectionStatement{}}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 30/1; end line/column 30/3, head=FixedTextImpl{codePosition=begin line/column 30/1; end line/column 30/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 30/11; end line/column 30/15, textBuffer=}}}}}}}}}}}}}}}}}}}}}}}}}", probe);
        baustein.accept(irTransformer);
        Workspace workspace = irTransformer.getWorkspace();
        assertNotNull(workspace);
        probe = workspace.toString();
        assertFalse(StringUtils.isBlank(probe));
        assertEquals("Workspace{workspaceName='HitAssWorkspace', projectsName='HitAssProjects', projectName='HitAssProject', documentName='HitAssDocument', repeatingPageName='HitAssRepeatingPage', pageContentName='HitAssPageContent', contentContainer=Paragraph{contentElements=[Text{name='text', text='Let's test away with the lelement WHILE-loop szenario!'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='2'}, ListDeclaration{listVariableName='indtext0', components='[]'}, DynamicContentReference{name='Global Variable: lelement', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'lelement',  'x' ) '}, DynamicContentReference{name='Global Variable: firstName', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'firstName',  '' ) '}, DynamicContentReference{name='Global Variable: lastName', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'lastName',  '' ) '}, DynamicContentReference{name='Assign from Userdata XML (oWL): firstName', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'firstName', /UserData/payload/line[@lineNr = hit2assext:getXmlSequence(var:read('renderSessionUuid'))]) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}, DynamicContentReference{name='Assign from Userdata XML (oWL): lastName', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'lastName', /UserData/payload/line[@lineNr = hit2assext:getXmlSequence(var:read('renderSessionUuid'))]) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}, Text{name='text', text='Hello '}, DynamicContentReference{name='Print: firstName', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'firstName')  '}, Text{name='text', text=' '}, DynamicContentReference{name='Print: lastName', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'lastName')  '}, Text{name='text', text=','}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='here comes your list:'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, DynamicContentReference{name='Assign from Userdata XML (oWL): lelement', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'lelement', /UserData/payload/line[@lineNr = hit2assext:getXmlSequence(var:read('renderSessionUuid'))]) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}, WhileLoopFlagValueFlavor{expression=BinaryOperatorExpression{codePosition=begin line/column 19/4; end line/column 19/11, lhs=IdExpression{id='lelement', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=NEQ, rhs=TextExpression{codePosition=begin line/column 19/16; end line/column 19/18, value='*'}, value=null}, components=[DynamicContentReference{name='ListConcat: indtext0: hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'lelement')  ', xpath=' hit2assext:addListValue(var:read('renderSessionUuid'), 'indtext0',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'lelement')  ) '}, DynamicContentReference{name='Assign from Userdata XML (iWL): lelement', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'lelement', ./. ) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}]}, DynamicContentReference{name='Global Variable: counter', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'counter', 1) '}, ForLoop{expression=ClouFunctionCall{codePosition=begin line/column 25/4; end line/column 25/10, functionName='listlen', args=LastExpressionList{codePosition=begin line/column 25/12; end line/column 25/21head='TextExpression{codePosition=begin line/column 25/12; end line/column 25/21, value='indtext0'}}}, components=[DynamicContentReference{name='Print: indtext0', xpath=' hit2assext:getListValueAt(var:read('renderSessionUuid'), 'indtext0',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'counter')  )'}, DynamicContentReference{name='Scalar Assignment: counter', xpath='hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'counter',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'counter')   + 1 )'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}]}, Text{name='text', text='And so it ends.'}, Text{name='text', text=''}]}}", probe);
        workspace.getContent();
    }

    @Test
    public void testListLength() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("ListLength"), "ISO8859_1");
        baustein = parser.CB();
        baustein.accept(merger);
        baustein.accept(blanksVisitor);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 5/1; end line/column 5/5, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 5/1; end line/column 5/5, head=FixedTextImpl{codePosition=begin line/column 5/1; end line/column 5/5, textBuffer=Let's test away with the listlen standard function!}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/1; end line/column 6/2, head=HitCommandStatement{codePosition=begin line/column 6/1; end line/column 6/2, hitCommand=RETURN, repetitor=NumExpression{codePosition=begin line/column 6/3; end line/column 6/3, value=2}, verstarkt=false}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/4; end line/column 7/11, head=GlobalListDeclarationStatement{codePosition=begin line/column 7/4; end line/column 7/11, listId='indtext0', listExpression=null}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/13; end line/column 8/15, head=GlobalDeclarationStatement{codePosition=begin line/column 8/13; end line/column 8/15, expression=TextExpression{codePosition=begin line/column 8/13; end line/column 8/15, value='x'}, id='lelement', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/14; end line/column 10/15, head=GlobalDeclarationStatement{codePosition=begin line/column 10/14; end line/column 10/15, expression=TextExpression{codePosition=begin line/column 10/14; end line/column 10/15, value=''}, id='firstName', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 11/13; end line/column 11/14, head=GlobalDeclarationStatement{codePosition=begin line/column 11/13; end line/column 11/14, expression=TextExpression{codePosition=begin line/column 11/13; end line/column 11/14, value=''}, id='lastName', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 13/5; end line/column 13/13, head=DynamicValue{codePosition=begin line/column 13/5; end line/column 13/13, name='firstName'}, tail=PairClouBausteinElementList{codePosition=begin line/column 14/5; end line/column 14/12, head=DynamicValue{codePosition=begin line/column 14/5; end line/column 14/12, name='lastName'}, tail=PairClouBausteinElementList{codePosition=begin line/column 16/1; end line/column 16/3, head=FixedTextImpl{codePosition=begin line/column 16/1; end line/column 16/3, textBuffer=The first name was read to be }, tail=PairClouBausteinElementList{codePosition=begin line/column 16/34; end line/column 16/42, head=PrintStatement{codePosition=begin line/column 16/34; end line/column 16/42, idExpression='IdExpression{id='firstName', idxExp1=null, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 16/43; end line/column 16/43, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 17/1; end line/column 17/3, head=FixedTextImpl{codePosition=begin line/column 17/1; end line/column 17/3, textBuffer=The last name was read to be }, tail=PairClouBausteinElementList{codePosition=begin line/column 17/33; end line/column 17/40, head=PrintStatement{codePosition=begin line/column 17/33; end line/column 17/40, idExpression='IdExpression{id='lastName', idxExp1=null, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 17/41; end line/column 17/41, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 18/1; end line/column 18/3, head=FixedTextImpl{codePosition=begin line/column 18/1; end line/column 18/3, textBuffer=Now comes the loop :-)}, tail=PairClouBausteinElementList{codePosition=begin line/column 18/23; end line/column 18/23, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 20/5; end line/column 20/12, head=DynamicValue{codePosition=begin line/column 20/5; end line/column 20/12, name='lelement'}, tail=PairClouBausteinElementList{codePosition=begin line/column 21/1; end line/column 21/2, head=WhileStatement{codePosition=begin line/column 21/1; end line/column 21/2, condition=BinaryOperatorExpression{codePosition=begin line/column 21/4; end line/column 21/11, lhs=IdExpression{id='lelement', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=NEQ, rhs=TextExpression{codePosition=begin line/column 21/16; end line/column 21/18, value='*'}, value=null}, whileBody=PairClouBausteinElementList{codePosition=begin line/column 22/8; end line/column 22/15, head=ListConcatenationStatement{codePosition=begin line/column 22/8; end line/column 22/15listId='indtext0', listExpression=LastExpressionList{codePosition=begin line/column 22/21; end line/column 22/28head='IdExpression{id='lelement', idxExp1=null, idxExp2=null, valueType=null, value=null}}}, tail=LastClouBausteinElementList{head=DynamicValue{codePosition=begin line/column 23/9; end line/column 23/16, name='lelement'}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 26/11; end line/column 26/17, head=GlobalDeclarationStatement{codePosition=begin line/column 26/11; end line/column 26/17, expression=ClouFunctionCall{codePosition=begin line/column 26/11; end line/column 26/17, functionName='listlen', args=LastExpressionList{codePosition=begin line/column 26/19; end line/column 26/28head='TextExpression{codePosition=begin line/column 26/19; end line/column 26/28, value='indtext0'}}}, id='length', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 27/1; end line/column 27/4, head=FixedTextImpl{codePosition=begin line/column 27/1; end line/column 27/4, textBuffer=Now, the length of this list should be 5, and actually, it is }, tail=PairClouBausteinElementList{codePosition=begin line/column 27/66; end line/column 27/71, head=PrintStatement{codePosition=begin line/column 27/66; end line/column 27/71, idExpression='IdExpression{id='length', idxExp1=null, idxExp2=null, valueType=null, value=null}'}, tail=PairClouBausteinElementList{codePosition=begin line/column 27/72; end line/column 27/72, head=SectionStatement{}, tail=PairClouBausteinElementList{codePosition=begin line/column 28/4; end line/column 28/10, head=ConditionalStatement{codePosition=begin line/column 28/4; end line/column 28/10, condition=BinaryOperatorExpression{codePosition=begin line/column 28/4; end line/column 28/10, lhs=ClouFunctionCall{codePosition=begin line/column 28/4; end line/column 28/10, functionName='listlen', args=LastExpressionList{codePosition=begin line/column 28/12; end line/column 28/21head='TextExpression{codePosition=begin line/column 28/12; end line/column 28/21, value='indtext0'}}}, operator=EQ, rhs=NumExpression{codePosition=begin line/column 28/26; end line/column 28/26, value=5}, value=null}, thenElement=PairClouBausteinElementList{codePosition=begin line/column 30/9; end line/column 30/10, head=FixedTextImpl{codePosition=begin line/column 30/9; end line/column 30/10, textBuffer=Na wunderbar, das hat geklappt.}, tail=LastClouBausteinElementList{head=SectionStatement{}}}, elseElement=PairClouBausteinElementList{codePosition=begin line/column 32/9; end line/column 32/12, head=FixedTextImpl{codePosition=begin line/column 32/9; end line/column 32/12, textBuffer=Hmm, da funktioniert noch etwas nicht. Probiert weiter.}, tail=LastClouBausteinElementList{head=SectionStatement{}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 34/1; end line/column 34/3, head=FixedTextImpl{codePosition=begin line/column 34/1; end line/column 34/3, textBuffer=End so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 34/11; end line/column 34/15, textBuffer=}}}}}}}}}}}}}}}}}}}}}}}}}}}", probe);
        baustein.accept(irTransformer);
        Workspace workspace = irTransformer.getWorkspace();
        assertNotNull(workspace);
        probe = workspace.toString();
        assertFalse(StringUtils.isBlank(probe));
        assertEquals("Workspace{workspaceName='HitAssWorkspace', projectsName='HitAssProjects', projectName='HitAssProject', documentName='HitAssDocument', repeatingPageName='HitAssRepeatingPage', pageContentName='HitAssPageContent', contentContainer=Paragraph{contentElements=[Text{name='text', text='Let's test away with the listlen standard function!'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='2'}, ListDeclaration{listVariableName='indtext0', components='[]'}, DynamicContentReference{name='Global Variable: lelement', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'lelement',  'x' ) '}, DynamicContentReference{name='Global Variable: firstName', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'firstName',  '' ) '}, DynamicContentReference{name='Global Variable: lastName', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'lastName',  '' ) '}, DynamicContentReference{name='Assign from Userdata XML (oWL): firstName', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'firstName', /UserData/payload/line[@lineNr = hit2assext:getXmlSequence(var:read('renderSessionUuid'))]) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}, DynamicContentReference{name='Assign from Userdata XML (oWL): lastName', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'lastName', /UserData/payload/line[@lineNr = hit2assext:getXmlSequence(var:read('renderSessionUuid'))]) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}, Text{name='text', text='The first name was read to be '}, DynamicContentReference{name='Print: firstName', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'firstName')  '}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='The last name was read to be '}, DynamicContentReference{name='Print: lastName', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'lastName')  '}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, Text{name='text', text='Now comes the loop :-)'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, DynamicContentReference{name='Assign from Userdata XML (oWL): lelement', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'lelement', /UserData/payload/line[@lineNr = hit2assext:getXmlSequence(var:read('renderSessionUuid'))]) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}, WhileLoopFlagValueFlavor{expression=BinaryOperatorExpression{codePosition=begin line/column 21/4; end line/column 21/11, lhs=IdExpression{id='lelement', idxExp1=null, idxExp2=null, valueType=null, value=null}, operator=NEQ, rhs=TextExpression{codePosition=begin line/column 21/16; end line/column 21/18, value='*'}, value=null}, components=[DynamicContentReference{name='ListConcat: indtext0: hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'lelement')  ', xpath=' hit2assext:addListValue(var:read('renderSessionUuid'), 'indtext0',  hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'lelement')  ) '}, DynamicContentReference{name='Assign from Userdata XML (iWL): lelement', xpath=' hit2assext:setScalarVariableValue(var:read('renderSessionUuid'), 'lelement', ./. ) | hit2assext:incrementXmlSequence(var:read('renderSessionUuid')) '}]}, DynamicContentReference{name='Global Variable: length', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'length',  hit2assext:getListLength(var:read('renderSessionUuid'),  'indtext0' ) ) '}, Text{name='text', text='Now, the length of this list should be 5, and actually, it is '}, DynamicContentReference{name='Print: length', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'length')  '}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}, IfThenElseParagraph{condition=BinaryOperatorExpression{codePosition=begin line/column 28/4; end line/column 28/10, lhs=ClouFunctionCall{codePosition=begin line/column 28/4; end line/column 28/10, functionName='listlen', args=LastExpressionList{codePosition=begin line/column 28/12; end line/column 28/21head='TextExpression{codePosition=begin line/column 28/12; end line/column 28/21, value='indtext0'}}}, operator=EQ, rhs=NumExpression{codePosition=begin line/column 28/26; end line/column 28/26, value=5}, value=null}, components=[IfThenParagraph{components=[Text{name='text', text='Na wunderbar, das hat geklappt.'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}]}, IfElseParagraph{components=[Text{name='text', text='Hmm, da funktioniert noch etwas nicht. Probiert weiter.'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='1'}]}]}, Text{name='text', text='End so it ends.'}, Text{name='text', text=''}]}}", probe);
    }

    @Test
    public void testInsertBlanksVisitor() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("InsertBlanksVisitorTest"), "ISO8859_1");
        baustein = parser.CB();
        baustein.accept(merger);
        baustein.accept(blanksVisitor);
        baustein.accept(irTransformer);
        Workspace workspace = irTransformer.getWorkspace();
        assertNotNull(workspace);
        String probe = workspace.toString();
        assertFalse(StringUtils.isBlank(probe));
        assertEquals("Workspace{workspaceName='HitAssWorkspace', projectsName='HitAssProjects', projectName='HitAssProject', documentName='HitAssDocument', repeatingPageName='HitAssRepeatingPage', pageContentName='HitAssPageContent', contentContainer=Paragraph{contentElements=[DynamicContentReference{name='Global Variable: firstName', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'firstName',  'John' ) '}, DynamicContentReference{name='Global Variable: lastName', xpath=' hit2assext:createScalarVariable(var:read('renderSessionUuid'), 'lastName',  'Connor' ) '}, Text{name='text', text='You are '}, DynamicContentReference{name='Print: firstName', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'firstName')  '}, Text{name='text', text=' '}, DynamicContentReference{name='Print: lastName', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'lastName')  '}, Text{name='text', text='.'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='2'}, Text{name='text', text='You are \"'}, DynamicContentReference{name='Print: firstName', xpath=' hit2assext:getScalarVariableValue(var:read('renderSessionUuid'), 'firstName')  '}, Text{name='text', text='\".'}, CarriageReturn{name='NL', repetitionExpression.toXPathString()='2'}, Text{name='text', text='And so it ends.'}, Text{name='text', text=''}]}}", probe);
    }

    @Test
    public void testSimpleIfLetter() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("/sampleDocuments/SimpleIfLetter/", "SimpleIfLetter", "clou"), "ISO8859-1");
        baustein = parser.CB();
        baustein.accept(merger);
        baustein.accept(blanksVisitor);
        baustein.accept(irTransformer);
        Workspace workspace = irTransformer.getWorkspace();
        assertNotNull(workspace);
        String acr = workspace.getContent();
        assertFalse(StringUtils.isBlank(acr));
        // check that InsertBlanksVisitor does not insert blanks before punctuation characters.
        assertTrue(acr.contains("<![CDATA[.]]"));
        // check that InsertBlanksVisitor inserts blanks between FixedText and PrintStatements
        assertTrue(acr.contains("den Versand von einem ]]"));
        // check that InsertBlanksVisitor inserts blanks between PrintStatements
        assertTrue(acr.contains("<![CDATA[ ]]"));
    }

}
