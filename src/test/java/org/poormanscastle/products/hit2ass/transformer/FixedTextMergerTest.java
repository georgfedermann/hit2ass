package org.poormanscastle.products.hit2ass.transformer;

import org.apache.commons.lang3.StringUtils;
import org.junit.Test;
import org.poormanscastle.products.hit2ass.TestUtils;
import org.poormanscastle.products.hit2ass.ast.domain.ClouBaustein;
import org.poormanscastle.products.hit2ass.parser.javacc.HitAssAstParser;

import static junit.framework.Assert.assertFalse;
import static junit.framework.TestCase.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

/**
 * Unittests for the AST Parser
 * <p>
 * Created by georg.federmann@poormanscastle.com on 08.04.2016.
 */
public class FixedTextMergerTest {

    private HitAssAstParser parser;
    private FixedTextMerger merger = new FixedTextMerger();
    private ClouBaustein baustein;

    @Test
    public void testCommentsAndFixedText() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("CommentsAndFixedText"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        assertTrue(baustein.toString().contains("Here is some fixed text that shall appear in the document. Loads and loads of text for beautiful autogenerated mailings. Gleichzeitig ersuchen wir den (das) beiliegende(n) Bescheid (INFO) anlässlich der Information zu expedieren bzw. auszuhändigen und einen entsprechenden Expedierungsvermerk anzubringen. And so it ends."));
    }

    @Test
    public void testHitCommandReturn() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("HitCommandReturn"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/5; end line/column 4/16, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/5; end line/column 4/16, head=FixedTextImpl{codePosition=begin line/column 4/5; end line/column 4/16, textBuffer=Gleichzeitig ersuchen wir den (das) beiliegende(n) Bescheid (INFO)}, tail=PairClouBausteinElementList{codePosition=begin line/column 5/5; end line/column 5/6, head=HitCommandStatement{codePosition=begin line/column 5/5; end line/column 5/6, hitCommand=RETURN, repetitor=NumExpression{codePosition=begin line/column 5/7; end line/column 5/7, value=2}, verstarkt=false}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/5; end line/column 6/14, head=FixedTextImpl{codePosition=begin line/column 6/5; end line/column 6/14, textBuffer=anlässlich der Information zu expedieren bzw. auszuhändigen und}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/5; end line/column 7/6, head=HitCommandStatement{codePosition=begin line/column 7/5; end line/column 7/6, hitCommand=RETURN, repetitor=null, verstarkt=false}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/5; end line/column 8/7, head=FixedTextImpl{codePosition=begin line/column 8/5; end line/column 8/7, textBuffer=wie folgt storniert haben:}, tail=LastClouBausteinElementList{head=HitCommandStatement{codePosition=begin line/column 9/5; end line/column 9/6, hitCommand=RETURN, repetitor=NumExpression{codePosition=begin line/column 9/8; end line/column 9/8, value=5}, verstarkt=false}}}}}}}}", probe);
    }

    @Test
    public void testIfThenBizarre() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("IfThenBizarre"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/8; end line/column 4/12, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/8; end line/column 4/12, head=ConditionalStatement{codePosition=begin line/column 4/8; end line/column 4/12, condition=BinaryOperatorExpression{codePosition=begin line/column 4/8; end line/column 4/12, lhs=IdExpression{id='dbbaz', valueType=null, value=null}, operator=NEQ, rhs=TextExpression{codePosition=begin line/column 4/17; end line/column 4/20, value='--'}, value=null}, thenElement=PairClouBausteinElementList{codePosition=begin line/column 6/15; end line/column 6/18, head=AbstractAstItem{codePosition=begin line/column 6/15; end line/column 6/18}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/24; end line/column 6/27, head=AbstractAstItem{codePosition=begin line/column 6/24; end line/column 6/27}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/34; end line/column 6/38, head=PrintStatement{codePosition=begin line/column 6/34; end line/column 6/38, symbolId='dbbaz'}, tail=LastClouBausteinElementList{head=HitCommandStatement{codePosition=begin line/column 7/13; end line/column 7/14, hitCommand=RETURN, repetitor=null, verstarkt=false}}}}}, elseElement=null}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/5; end line/column 9/7, head=FixedTextImpl{codePosition=begin line/column 9/5; end line/column 9/7, textBuffer=End so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 9/15; end line/column 9/19, textBuffer=}}}}}", probe);
    }

    @Test
    public void testLessThen() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("LessThen"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/9; end line/column 4/9, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/9; end line/column 4/9, head=GlobalDeclarationStatement{codePosition=begin line/column 4/9; end line/column 4/9, expression=NumExpression{codePosition=begin line/column 4/9; end line/column 4/9, value=5}, id='var1', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 5/9; end line/column 5/9, head=GlobalDeclarationStatement{codePosition=begin line/column 5/9; end line/column 5/9, expression=NumExpression{codePosition=begin line/column 5/9; end line/column 5/9, value=7}, id='var2', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/4; end line/column 7/7, head=ConditionalStatement{codePosition=begin line/column 7/4; end line/column 7/7, condition=BinaryOperatorExpression{codePosition=begin line/column 7/4; end line/column 7/7, lhs=IdExpression{id='var1', valueType=null, value=null}, operator=LTE, rhs=IdExpression{id='var2', valueType=null, value=null}, value=null}, thenElement=PairClouBausteinElementList{codePosition=begin line/column 8/6; end line/column 8/9, head=FixedTextImpl{codePosition=begin line/column 8/6; end line/column 8/9, textBuffer=This should be printed}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 8/21; end line/column 8/27, textBuffer=}}}, elseElement=PairClouBausteinElementList{codePosition=begin line/column 9/6; end line/column 9/9, head=FixedTextImpl{codePosition=begin line/column 9/6; end line/column 9/9, textBuffer=This should not be printed}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 9/25; end line/column 9/31, textBuffer=}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 11/1; end line/column 11/3, head=FixedTextImpl{codePosition=begin line/column 11/1; end line/column 11/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 11/11; end line/column 11/15, textBuffer=}}}}}}}", probe);
    }

    @Test
    public void testFunctionCallAsIfCondtion() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("FunctionCallAsIfCondition"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/2; end line/column 4/2, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/2; end line/column 4/2, head=FixedTextImpl{codePosition=begin line/column 4/2; end line/column 4/2, textBuffer=D myVar \"Hello, World!\"}, tail=PairClouBausteinElementList{codePosition=begin line/column 5/4; end line/column 5/4, head=ConditionalStatement{codePosition=begin line/column 5/4; end line/column 5/4, condition=BinaryOperatorExpression{codePosition=begin line/column 5/4; end line/column 5/4, lhs=NumExpression{codePosition=begin line/column 5/4; end line/column 5/4, value=5}, operator=EQ, rhs=ClouFunctionCall{codePosition=begin line/column 5/8; end line/column 5/14, functionName='listlen', args=GlobalListDeclarationStatement{codePosition=begin line/column 5/16; end line/column 5/22head='TextExpression{codePosition=begin line/column 5/16; end line/column 5/22, value='myVar'}}}, value=null}, thenElement=PairClouBausteinElementList{codePosition=begin line/column 6/6; end line/column 6/9, head=FixedTextImpl{codePosition=begin line/column 6/6; end line/column 6/9, textBuffer=This should not be printed.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 6/25; end line/column 6/32, textBuffer=}}}, elseElement=PairClouBausteinElementList{codePosition=begin line/column 7/6; end line/column 7/9, head=FixedTextImpl{codePosition=begin line/column 7/6; end line/column 7/9, textBuffer=This should be printed.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 7/21; end line/column 7/28, textBuffer=}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/1; end line/column 9/3, head=FixedTextImpl{codePosition=begin line/column 9/1; end line/column 9/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 9/11; end line/column 9/15, textBuffer=}}}}}}", probe);
    }

    @Test
    public void testIfThenElese() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("IfThenElse"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/3; end line/column 4/6, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/3; end line/column 4/6, head=FixedTextImpl{codePosition=begin line/column 4/3; end line/column 4/6, textBuffer=Text mit Umlauten äüößÄÜÖ_-\"Hallo\"}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/14; end line/column 6/20, head=GlobalDeclarationStatement{codePosition=begin line/column 6/14; end line/column 6/20, expression=TextExpression{codePosition=begin line/column 6/14; end line/column 6/20, value='AL001'}, id='bauname', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/23; end line/column 7/23, head=GlobalDeclarationStatement{codePosition=begin line/column 7/23; end line/column 7/23, expression=NumExpression{codePosition=begin line/column 7/23; end line/column 7/23, value=3}, id='anzahlLeerzeilen', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/3; end line/column 9/4, head=HitCommandStatement{codePosition=begin line/column 9/3; end line/column 9/4, hitCommand=RETURN, repetitor=IdExpression{id='anzahlLeerzeilen', valueType=null, value=null}, verstarkt=false}, tail=PairClouBausteinElementList{codePosition=begin line/column 11/6; end line/column 11/12, head=ConditionalStatement{codePosition=begin line/column 11/6; end line/column 11/12, condition=BinaryOperatorExpression{codePosition=begin line/column 11/6; end line/column 11/12, lhs=IdExpression{id='bauname', valueType=null, value=null}, operator=EQ, rhs=TextExpression{codePosition=begin line/column 11/16; end line/column 11/22, value='AL001'}, value=null}, thenElement=PairClouBausteinElementList{codePosition=begin line/column 14/7; end line/column 14/9, head=FixedTextImpl{codePosition=begin line/column 14/7; end line/column 14/9, textBuffer=den Pensionsakt}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 14/11; end line/column 14/21, textBuffer=}}}, elseElement=PairClouBausteinElementList{codePosition=begin line/column 17/7; end line/column 17/9, head=FixedTextImpl{codePosition=begin line/column 17/7; end line/column 17/9, textBuffer=den Treppenakt}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 17/11; end line/column 17/20, textBuffer=}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 19/3; end line/column 19/4, head=HitCommandStatement{codePosition=begin line/column 19/3; end line/column 19/4, hitCommand=RETURN, repetitor=IdExpression{id='anzahlLeerzeilen', valueType=null, value=null}, verstarkt=false}, tail=PairClouBausteinElementList{codePosition=begin line/column 20/1; end line/column 20/7, head=FixedTextImpl{codePosition=begin line/column 20/1; end line/column 20/7, textBuffer=Halfway through...}, tail=PairClouBausteinElementList{codePosition=begin line/column 21/3; end line/column 21/4, head=HitCommandStatement{codePosition=begin line/column 21/3; end line/column 21/4, hitCommand=RETURN, repetitor=IdExpression{id='anzahlLeerzeilen', valueType=null, value=null}, verstarkt=false}, tail=PairClouBausteinElementList{codePosition=begin line/column 22/6; end line/column 22/12, head=ConditionalStatement{codePosition=begin line/column 22/6; end line/column 22/12, condition=BinaryOperatorExpression{codePosition=begin line/column 22/6; end line/column 22/12, lhs=IdExpression{id='bauname', valueType=null, value=null}, operator=NEQ, rhs=TextExpression{codePosition=begin line/column 22/17; end line/column 22/23, value='AL001'}, value=null}, thenElement=PairClouBausteinElementList{codePosition=begin line/column 25/7; end line/column 25/9, head=FixedTextImpl{codePosition=begin line/column 25/7; end line/column 25/9, textBuffer=den Pensionsakt}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 25/11; end line/column 25/21, textBuffer=}}}, elseElement=PairClouBausteinElementList{codePosition=begin line/column 28/7; end line/column 28/9, head=FixedTextImpl{codePosition=begin line/column 28/7; end line/column 28/9, textBuffer=den Treppenakt}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 28/11; end line/column 28/20, textBuffer=}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 30/3; end line/column 30/4, head=HitCommandStatement{codePosition=begin line/column 30/3; end line/column 30/4, hitCommand=RETURN, repetitor=IdExpression{id='anzahlLeerzeilen', valueType=null, value=null}, verstarkt=false}, tail=PairClouBausteinElementList{codePosition=begin line/column 31/1; end line/column 31/3, head=FixedTextImpl{codePosition=begin line/column 31/1; end line/column 31/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=HitCommandStatement{codePosition=begin line/column 32/3; end line/column 32/4, hitCommand=RETURN, repetitor=IdExpression{id='anzahlLeerzeilen', valueType=null, value=null}, verstarkt=false}}}}}}}}}}}}}}", probe);
    }

    @Test
    public void testWhile() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("While"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/1; end line/column 4/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/1; end line/column 4/4, head=FixedTextImpl{codePosition=begin line/column 4/1; end line/column 4/4, textBuffer=Here is some fixed text for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 5/1; end line/column 5/2, head=WhileStatement{codePosition=begin line/column 5/1; end line/column 5/2, condition=BinaryOperatorExpression{codePosition=begin line/column 5/4; end line/column 5/10, lhs=IdExpression{id='counter', valueType=null, value=null}, operator=EQ, rhs=IdExpression{id='true', valueType=null, value=null}, value=null}, whileBody=PairClouBausteinElementList{codePosition=begin line/column 6/5; end line/column 6/8, head=FixedTextImpl{codePosition=begin line/column 6/5; end line/column 6/8, textBuffer=Some fixed text within the loop}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/16; end line/column 7/22, head=AssignmentStatement{codePosition=begin line/column 7/16; end line/column 7/22, id='counter', expression=BinaryOperatorExpression{codePosition=begin line/column 7/16; end line/column 7/22, lhs=IdExpression{id='counter', valueType=null, value=null}, operator=PLUS, rhs=NumExpression{codePosition=begin line/column 7/26; end line/column 7/26, value=1}, value=null}}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/8; end line/column 8/14, head=ConditionalStatement{codePosition=begin line/column 8/8; end line/column 8/14, condition=BinaryOperatorExpression{codePosition=begin line/column 8/8; end line/column 8/14, lhs=IdExpression{id='counter', valueType=null, value=null}, operator=EQ, rhs=IdExpression{id='counter', valueType=null, value=null}, value=null}, thenElement=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 10/9; end line/column 10/21, textBuffer=Grammelknödel}}, elseElement=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 12/9; end line/column 12/17, textBuffer=Backfisch}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 14/5; end line/column 14/9, head=FixedTextImpl{codePosition=begin line/column 14/5; end line/column 14/9, textBuffer=Close to the Closure}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 14/18; end line/column 14/24, textBuffer=}}}}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 16/1; end line/column 16/3, head=FixedTextImpl{codePosition=begin line/column 16/1; end line/column 16/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 16/11; end line/column 16/15, textBuffer=}}}}}}", probe);
    }

    @Test
    public void testDeclarations() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("Declarations"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertFalse(StringUtils.isEmpty(probe));
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/1; end line/column 4/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/1; end line/column 4/4, head=FixedTextImpl{codePosition=begin line/column 4/1; end line/column 4/4, textBuffer=Here is some fixed text.}, tail=PairClouBausteinElementList{codePosition=begin line/column 5/14; end line/column 5/19, head=GlobalDeclarationStatement{codePosition=begin line/column 5/14; end line/column 5/19, expression=TextExpression{codePosition=begin line/column 5/14; end line/column 5/19, value='John'}, id='firstName', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/13; end line/column 6/17, head=GlobalDeclarationStatement{codePosition=begin line/column 6/13; end line/column 6/17, expression=TextExpression{codePosition=begin line/column 6/13; end line/column 6/17, value='Loo'}, id='lastName', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/8; end line/column 7/9, head=GlobalDeclarationStatement{codePosition=begin line/column 7/8; end line/column 7/9, expression=NumExpression{codePosition=begin line/column 7/8; end line/column 7/9, value=42}, id='age', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/11; end line/column 8/14, head=LocalDeclarationStatement{codePosition=begin line/column 8/11; end line/column 8/14, expression=DecimalExpression{codePosition=begin line/column 8/11; end line/column 8/14, value=1.78}, id='height', formatDefinition='\"-10.2\"'}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/11; end line/column 9/13, head=LocalDeclarationStatement{codePosition=begin line/column 9/11; end line/column 9/13, expression=NumExpression{codePosition=begin line/column 9/11; end line/column 9/13, value=196}, id='weight', formatDefinition='\"10.2\"'}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/10; end line/column 10/22, head=LocalDeclarationStatement{codePosition=begin line/column 10/10; end line/column 10/22, expression=TextExpression{codePosition=begin line/column 10/10; end line/column 10/22, value='Kevin Cline'}, id='label', formatDefinition='\"10.6\"'}, tail=PairClouBausteinElementList{codePosition=begin line/column 11/15; end line/column 17/39, head=GlobalDeclarationStatement{codePosition=begin line/column 11/15; end line/column 17/39, expression=TextExpression{codePosition=begin line/column 11/15; end line/column 17/39, value='#^ \"ZL NEU\"\n" +
                "               #^ \"W LÖSCHEN\"\n" +
                "               #G  14 1\n" +
                "               #G  9 2\n" +
                "               #G 88 8\n" +
                "               #^ \"RETURN\"\n" +
                "               #$ absattribut(\"BLK\")'}, id='ZLNEU8', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 18/1; end line/column 18/3, head=FixedTextImpl{codePosition=begin line/column 18/1; end line/column 18/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 18/11; end line/column 18/15, textBuffer=}}}}}}}}}}}}", probe);
    }

    @Test
    public void testSwitch() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("Switch"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
//        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/1; end line/column 4/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/1; end line/column 4/4, head=FixedTextImpl{codePosition=begin line/column 4/1; end line/column 4/4, textBuffer=Here is some fixed text for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 5/17; end line/column 5/23, head=GlobalDeclarationStatement{codePosition=begin line/column 5/17; end line/column 5/23, expression=TextExpression{codePosition=begin line/column 5/17; end line/column 5/23, value='bruno'}, id='conditionVar', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/4; end line/column 6/15, head=SwitchStatement{codePosition=begin line/column 6/4; end line/column 6/15, idExpression=IdExpression{id='conditionVar', valueType=null, value=null}, caseStatement=PairCaseStatementList{codePosition=begin line/column 7/5; end line/column 7/13, head=CaseStatementImpl{codePosition=begin line/column 7/5; end line/column 7/13, match=/\"peter\":, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 8/9; end line/column 8/12, head=FixedTextImpl{codePosition=begin line/column 8/9; end line/column 8/12, textBuffer=Your name appears to be \"Peter\".}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/12; end line/column 9/41, head=IncludeBausteinStatement{codePosition=begin line/column 9/12; end line/column 9/41, pathToBaustein='\"/home/assentis/Greeting.clou\"'}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/9; end line/column 10/14, head=FixedTextImpl{codePosition=begin line/column 10/9; end line/column 10/14, textBuffer=Adieu, Peter!}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 10/16; end line/column 10/21, textBuffer=}}}}}}, tail=PairCaseStatementList{codePosition=begin line/column 11/5; end line/column 11/13, head=CaseStatementImpl{codePosition=begin line/column 11/5; end line/column 11/13, match=/\"bruno\":, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 12/5; end line/column 12/8, head=FixedTextImpl{codePosition=begin line/column 12/5; end line/column 12/8, textBuffer=Your name appears to be \"Bruno\".}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 12/29; end line/column 12/36, textBuffer=}}}}, tail=PairCaseStatementList{codePosition=begin line/column 13/5; end line/column 13/7, head=CaseStatementImpl{codePosition=begin line/column 13/5; end line/column 13/7, match=/1:, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 14/9; end line/column 14/9, head=FixedTextImpl{codePosition=begin line/column 14/9; end line/column 14/9, textBuffer=I am one year old.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 14/23; end line/column 14/26, textBuffer=}}}}, tail=PairCaseStatementList{codePosition=begin line/column 15/5; end line/column 15/7, head=CaseStatementImpl{codePosition=begin line/column 15/5; end line/column 15/7, match=/2:, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 16/9; end line/column 16/9, head=FixedTextImpl{codePosition=begin line/column 16/9; end line/column 16/9, textBuffer=I am two years old.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 16/24; end line/column 16/27, textBuffer=}}}}, tail=PairCaseStatementList{codePosition=begin line/column 17/5; end line/column 17/8, head=CaseStatementImpl{codePosition=begin line/column 17/5; end line/column 17/8, match=/35:, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 18/9; end line/column 18/9, head=FixedTextImpl{codePosition=begin line/column 18/9; end line/column 18/9, textBuffer=I am six years old.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 18/24; end line/column 18/27, textBuffer=}}}}, tail=LastCaseStatementList{codePosition=begin line/column 19/5; end line/column 19/6, head=CaseStatementImpl{codePosition=begin line/column 19/5; end line/column 19/6, match=/:, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 20/5; end line/column 20/7, head=FixedTextImpl{codePosition=begin line/column 20/5; end line/column 20/7, textBuffer=For all the rest of you: \"Hello, World!\"}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 20/38; end line/column 20/44, textBuffer=}}}}}}}}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 22/1; end line/column 22/3, head=FixedTextImpl{codePosition=begin line/column 22/1; end line/column 22/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 22/11; end line/column 22/15, textBuffer=}}}}}}}", probe);
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/1; end line/column 4/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/1; end line/column 4/4, head=FixedTextImpl{codePosition=begin line/column 4/1; end line/column 4/4, textBuffer=Here is some fixed text for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 5/17; end line/column 5/23, head=GlobalDeclarationStatement{codePosition=begin line/column 5/17; end line/column 5/23, expression=TextExpression{codePosition=begin line/column 5/17; end line/column 5/23, value='bruno'}, id='conditionVar', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/4; end line/column 6/15, head=SwitchStatement{codePosition=begin line/column 6/4; end line/column 6/15, idExpression=IdExpression{id='conditionVar', valueType=null, value=null}, caseStatement=PairCaseStatementList{codePosition=begin line/column 7/5; end line/column 7/13, head=CaseStatementImpl{codePosition=begin line/column 7/5; end line/column 7/13, match=/\"peter\":, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 8/9; end line/column 8/12, head=FixedTextImpl{codePosition=begin line/column 8/9; end line/column 8/12, textBuffer=Your name appears to be \"Peter\".}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/12; end line/column 9/41, head=IncludeBausteinStatement{codePosition=begin line/column 9/12; end line/column 9/41, pathToBaustein='\"/home/assentis/Greeting.clou\"', content='null'}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/9; end line/column 10/14, head=FixedTextImpl{codePosition=begin line/column 10/9; end line/column 10/14, textBuffer=Adieu, Peter!}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 10/16; end line/column 10/21, textBuffer=}}}}}}, tail=PairCaseStatementList{codePosition=begin line/column 11/5; end line/column 11/13, head=CaseStatementImpl{codePosition=begin line/column 11/5; end line/column 11/13, match=/\"bruno\":, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 12/5; end line/column 12/8, head=FixedTextImpl{codePosition=begin line/column 12/5; end line/column 12/8, textBuffer=Your name appears to be \"Bruno\".}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 12/29; end line/column 12/36, textBuffer=}}}}, tail=PairCaseStatementList{codePosition=begin line/column 13/5; end line/column 13/7, head=CaseStatementImpl{codePosition=begin line/column 13/5; end line/column 13/7, match=/1:, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 14/9; end line/column 14/9, head=FixedTextImpl{codePosition=begin line/column 14/9; end line/column 14/9, textBuffer=I am one year old.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 14/23; end line/column 14/26, textBuffer=}}}}, tail=PairCaseStatementList{codePosition=begin line/column 15/5; end line/column 15/7, head=CaseStatementImpl{codePosition=begin line/column 15/5; end line/column 15/7, match=/2:, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 16/9; end line/column 16/9, head=FixedTextImpl{codePosition=begin line/column 16/9; end line/column 16/9, textBuffer=I am two years old.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 16/24; end line/column 16/27, textBuffer=}}}}, tail=PairCaseStatementList{codePosition=begin line/column 17/5; end line/column 17/8, head=CaseStatementImpl{codePosition=begin line/column 17/5; end line/column 17/8, match=/35:, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 18/9; end line/column 18/9, head=FixedTextImpl{codePosition=begin line/column 18/9; end line/column 18/9, textBuffer=I am six years old.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 18/24; end line/column 18/27, textBuffer=}}}}, tail=LastCaseStatementList{codePosition=begin line/column 19/5; end line/column 19/6, head=CaseStatementImpl{codePosition=begin line/column 19/5; end line/column 19/6, match=/:, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 20/5; end line/column 20/7, head=FixedTextImpl{codePosition=begin line/column 20/5; end line/column 20/7, textBuffer=For all the rest of you: \"Hello, World!\"}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 20/38; end line/column 20/44, textBuffer=}}}}}}}}}}}, tail=PairClouBausteinElementList{codePosition=begin line/column 22/1; end line/column 22/3, head=FixedTextImpl{codePosition=begin line/column 22/1; end line/column 22/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 22/11; end line/column 22/15, textBuffer=}}}}}}}", probe);
    }

    @Test
    public void testDynamicValue() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("DynamicValue"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertFalse(StringUtils.isEmpty(probe));
//        assertEquals("ClouBausteinImpl{codePosition=begin line/column 5/1; end line/column 5/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 5/1; end line/column 5/4, head=FixedTextImpl{codePosition=begin line/column 5/1; end line/column 5/4, textBuffer=This is some fixed text for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/14; end line/column 6/19, head=GlobalDeclarationStatement{codePosition=begin line/column 6/14; end line/column 6/19, expression=TextExpression{codePosition=begin line/column 6/14; end line/column 6/19, value='John'}, id='firstName', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/4; end line/column 7/34, head=IncludeBausteinStatement{codePosition=begin line/column 7/4; end line/column 7/34, pathToBaustein='\"/home/assentis/Variables.clou\"'}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/4; end line/column 8/51, head=OpenFileCommand{codePosition=begin line/column 8/4; end line/column 8/51, fileName='\"/opt/batch/inputfiles/20150430-night_batch.txt\"'}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/5; end line/column 9/13, head=DynamicValue{codePosition=begin line/column 9/5; end line/column 9/13, name='firstName'}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/5; end line/column 10/12, head=DynamicValue{codePosition=begin line/column 10/5; end line/column 10/12, name='lastName'}, tail=PairClouBausteinElementList{codePosition=begin line/column 11/5; end line/column 11/14, head=DynamicValue{codePosition=begin line/column 11/5; end line/column 11/14, name='customerNr'}, tail=PairClouBausteinElementList{codePosition=begin line/column 12/6; end line/column 12/12, head=DynamicValue{codePosition=begin line/column 12/6; end line/column 12/12, name='orderNr'}, tail=PairClouBausteinElementList{codePosition=begin line/column 13/4; end line/column 13/51, head=CloseFileCommand{codePosition=begin line/column 13/4; end line/column 13/51, fileName='\"/opt/batch/inputfiles/20150430-night_batch.txt\"'}, tail=PairClouBausteinElementList{codePosition=begin line/column 14/1; end line/column 14/3, head=FixedTextImpl{codePosition=begin line/column 14/1; end line/column 14/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 14/11; end line/column 14/15, textBuffer=}}}}}}}}}}}}}", probe);
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 5/1; end line/column 5/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 5/1; end line/column 5/4, head=FixedTextImpl{codePosition=begin line/column 5/1; end line/column 5/4, textBuffer=This is some fixed text for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/14; end line/column 6/19, head=GlobalDeclarationStatement{codePosition=begin line/column 6/14; end line/column 6/19, expression=TextExpression{codePosition=begin line/column 6/14; end line/column 6/19, value='John'}, id='firstName', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/4; end line/column 7/34, head=IncludeBausteinStatement{codePosition=begin line/column 7/4; end line/column 7/34, pathToBaustein='\"/home/assentis/Variables.clou\"', content='null'}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/4; end line/column 8/51, head=OpenFileCommand{codePosition=begin line/column 8/4; end line/column 8/51, fileName='\"/opt/batch/inputfiles/20150430-night_batch.txt\"'}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/5; end line/column 9/13, head=DynamicValue{codePosition=begin line/column 9/5; end line/column 9/13, name='firstName'}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/5; end line/column 10/12, head=DynamicValue{codePosition=begin line/column 10/5; end line/column 10/12, name='lastName'}, tail=PairClouBausteinElementList{codePosition=begin line/column 11/5; end line/column 11/14, head=DynamicValue{codePosition=begin line/column 11/5; end line/column 11/14, name='customerNr'}, tail=PairClouBausteinElementList{codePosition=begin line/column 12/6; end line/column 12/12, head=DynamicValue{codePosition=begin line/column 12/6; end line/column 12/12, name='orderNr'}, tail=PairClouBausteinElementList{codePosition=begin line/column 13/4; end line/column 13/51, head=CloseFileCommand{codePosition=begin line/column 13/4; end line/column 13/51, fileName='\"/opt/batch/inputfiles/20150430-night_batch.txt\"'}, tail=PairClouBausteinElementList{codePosition=begin line/column 14/1; end line/column 14/3, head=FixedTextImpl{codePosition=begin line/column 14/1; end line/column 14/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 14/11; end line/column 14/15, textBuffer=}}}}}}}}}}}}}", probe);
    }

    @Test
    public void testIncludeBausteinStatement() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("IncludeBaustein"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
//        assertEquals("ClouBausteinImpl{codePosition=begin line/column 5/1; end line/column 5/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 5/1; end line/column 5/4, head=FixedTextImpl{codePosition=begin line/column 5/1; end line/column 5/4, textBuffer=Here is some fixed text for testing. This is fixed text for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/14; end line/column 6/19, head=GlobalDeclarationStatement{codePosition=begin line/column 6/14; end line/column 6/19, expression=TextExpression{codePosition=begin line/column 6/14; end line/column 6/19, value='John'}, id='firstName', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/4; end line/column 7/34, head=IncludeBausteinStatement{codePosition=begin line/column 7/4; end line/column 7/34, pathToBaustein='\"/home/assentis/Variables.clou\"'}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/1; end line/column 8/4, head=FixedTextImpl{codePosition=begin line/column 8/1; end line/column 8/4, textBuffer=Here is more fixed text for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/4; end line/column 9/40, head=IncludeBausteinStatement{codePosition=begin line/column 9/4; end line/column 9/40, pathToBaustein='\"/home/assentis/archive/Address.clou\"'}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/1; end line/column 10/3, head=FixedTextImpl{codePosition=begin line/column 10/1; end line/column 10/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 10/11; end line/column 10/15, textBuffer=}}}}}}}}}", probe);
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 5/1; end line/column 5/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 5/1; end line/column 5/4, head=FixedTextImpl{codePosition=begin line/column 5/1; end line/column 5/4, textBuffer=Here is some fixed text for testing. This is fixed text for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/14; end line/column 6/19, head=GlobalDeclarationStatement{codePosition=begin line/column 6/14; end line/column 6/19, expression=TextExpression{codePosition=begin line/column 6/14; end line/column 6/19, value='John'}, id='firstName', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/4; end line/column 7/34, head=IncludeBausteinStatement{codePosition=begin line/column 7/4; end line/column 7/34, pathToBaustein='\"/home/assentis/Variables.clou\"', content='null'}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/1; end line/column 8/4, head=FixedTextImpl{codePosition=begin line/column 8/1; end line/column 8/4, textBuffer=Here is more fixed text for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/4; end line/column 9/40, head=IncludeBausteinStatement{codePosition=begin line/column 9/4; end line/column 9/40, pathToBaustein='\"/home/assentis/archive/Address.clou\"', content='null'}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/1; end line/column 10/3, head=FixedTextImpl{codePosition=begin line/column 10/1; end line/column 10/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 10/11; end line/column 10/15, textBuffer=}}}}}}}}}", probe);
    }

    @Test
    public void testListDeclaration() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("ListDeclaration"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/1; end line/column 4/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/1; end line/column 4/4, head=FixedTextImpl{codePosition=begin line/column 4/1; end line/column 4/4, textBuffer=This is fixed text for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 5/4; end line/column 5/10, head=GlobalListDeclarationStatement{codePosition=begin line/column 5/4; end line/column 5/10, listId='liste99', listExpression=AbstractAstItem{codePosition=begin line/column 5/16; end line/column 5/16}}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/1; end line/column 6/4, head=FixedTextImpl{codePosition=begin line/column 6/1; end line/column 6/4, textBuffer=More fixed text}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/4; end line/column 7/10, head=LocalListDeclarationStatement{codePosition=begin line/column 7/4; end line/column 7/10listId='liste98', listExpression=AbstractAstItem{codePosition=begin line/column 7/16; end line/column 7/24}}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/4; end line/column 8/10, head=GlobalListDeclarationStatement{codePosition=begin line/column 8/4; end line/column 8/10, listId='liste97', listExpression=BinaryOperatorExpression{codePosition=begin line/column 8/14; end line/column 8/20, lhs=IdExpression{id='liste99', valueType=null, value=null}, operator=AND, rhs=BinaryOperatorExpression{codePosition=begin line/column 8/24; end line/column 8/30, lhs=IdExpression{id='liste98', valueType=null, value=null}, operator=AND, rhs=GlobalListDeclarationStatement{codePosition=begin line/column 8/36; end line/column 8/41head='TextExpression{codePosition=begin line/column 8/36; end line/column 8/41, value='argl'}}, value=null}, value=null}}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/1; end line/column 9/4, head=FixedTextImpl{codePosition=begin line/column 9/1; end line/column 9/4, textBuffer=Yet, another fixed text.}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/4; end line/column 10/10, head=GlobalListDeclarationStatement{codePosition=begin line/column 10/4; end line/column 10/10, listId='beilage', listExpression=null}, tail=PairClouBausteinElementList{codePosition=begin line/column 11/1; end line/column 11/3, head=FixedTextImpl{codePosition=begin line/column 11/1; end line/column 11/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 11/11; end line/column 11/15, textBuffer=}}}}}}}}}}}", probe);
    }

    @Test
    public void testPrintStatement() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("PrintStatement"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/1; end line/column 4/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/1; end line/column 4/4, head=FixedTextImpl{codePosition=begin line/column 4/1; end line/column 4/4, textBuffer=This is some fixed test.}, tail=PairClouBausteinElementList{codePosition=begin line/column 5/10; end line/column 5/22, head=GlobalDeclarationStatement{codePosition=begin line/column 5/10; end line/column 5/22, expression=TextExpression{codePosition=begin line/column 5/10; end line/column 5/22, value='John Coller'}, id='myVar', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/1; end line/column 6/4, head=FixedTextImpl{codePosition=begin line/column 6/1; end line/column 6/4, textBuffer=Good day to you Mr.}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/24; end line/column 6/28, head=PrintStatement{codePosition=begin line/column 6/24; end line/column 6/28, symbolId='myVar'}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/29; end line/column 6/29, head=FixedTextImpl{codePosition=begin line/column 6/29; end line/column 6/29, textBuffer=! May the odds be ever in your favor.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 7/30; end line/column 7/35, textBuffer=}}}}}}}}", probe);
    }

    @Test
    public void testCursorPositions() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("CursorPositions"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 5/1; end line/column 5/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 5/1; end line/column 5/4, head=FixedTextImpl{codePosition=begin line/column 5/1; end line/column 5/4, textBuffer=This is fixed text for you}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/4; end line/column 6/5, head=GStatement{codePosition=begin line/column 6/4; end line/column 6/5, xpos=NumExpression{codePosition=begin line/column 6/4; end line/column 6/5, value=15}, value=NumExpression{codePosition=begin line/column 6/7; end line/column 6/7, value=4}}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/4; end line/column 7/13, head=ZStatement{codePosition=begin line/column 7/4; end line/column 7/13colPos=IdExpression{id='disbelieve', valueType=null, value=null}, rowPos=IdExpression{id='doubt', valueType=null, value=null}}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/4; end line/column 8/5, head=JStatement{codePosition=begin line/column 8/4; end line/column 8/5colPos=NumExpression{codePosition=begin line/column 8/4; end line/column 8/5, value=18}, rowPos=NumExpression{codePosition=begin line/column 8/7; end line/column 8/7, value=3}}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/4; end line/column 9/13, head=JStatement{codePosition=begin line/column 9/4; end line/column 9/13colPos=IdExpression{id='disbelieve', valueType=null, value=null}, rowPos=IdExpression{id='doubt', valueType=null, value=null}}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/1; end line/column 10/3, head=FixedTextImpl{codePosition=begin line/column 10/1; end line/column 10/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 10/11; end line/column 10/15, textBuffer=}}}}}}}}}", probe);
    }

    @Test
    public void testMacroCallStatement() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("MacroCall"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 4/1; end line/column 4/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/1; end line/column 4/4, head=FixedTextImpl{codePosition=begin line/column 4/1; end line/column 4/4, textBuffer=Here is some fixed text for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 5/14; end line/column 5/21, head=GlobalDeclarationStatement{codePosition=begin line/column 5/14; end line/column 5/21, expression=TextExpression{codePosition=begin line/column 5/14; end line/column 5/21, value='Johnny'}, id='firstName', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/4; end line/column 6/12, head=AbstractAstItem{codePosition=begin line/column 6/4; end line/column 6/12}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/4; end line/column 7/11, head=AbstractAstItem{codePosition=begin line/column 7/4; end line/column 7/11}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/1; end line/column 8/3, head=FixedTextImpl{codePosition=begin line/column 8/1; end line/column 8/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 8/11; end line/column 8/15, textBuffer=}}}}}}}}", probe);
    }

    @Test
    public void testMacroDefinitionStatement() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("MacroDefinition"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        String reference = "ClouBausteinImpl{codePosition=begin line/column 4/1; end line/column 4/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 4/1; end line/column 4/4, head=FixedTextImpl{codePosition=begin line/column 4/1; end line/column 4/4, textBuffer=This is fixed text for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 5/10; end line/column 5/43, head=GlobalDeclarationStatement{codePosition=begin line/column 5/10; end line/column 5/43, expression=TextExpression{codePosition=begin line/column 5/10; end line/column 5/43, value='#$ textattribut(\"FE\", \"ein\")'}, id='FEEIN', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/1; end line/column 6/4, head=FixedTextImpl{codePosition=begin line/column 6/1; end line/column 6/4, textBuffer=Some more fixed text. For you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/15; end line/column 15/29, head=GlobalDeclarationStatement{codePosition=begin line/column 8/15; end line/column 15/29, expression=TextExpression{codePosition=begin line/column 8/15; end line/column 15/29, value='#^ \"ZL BEARB\"\n" +
                "               #^ \"ABS FORMAT\"\n" +
                "               #^ \"RETURN\"\n" +
                "               #^ \"VERSTÄRKER\"\n" +
                "               #^ \"A UNTEN\"\n" +
                "               #^ \"A OBEN\"\n" +
                "               #^ \"A UNTEN\"\n" +
                "               #^ \"RETURN\"'}, id='ABSFORMAT', formatDefinition=''}, tail=PairClouBausteinElementList{codePosition=begin line/column 16/1; end line/column 16/3, head=FixedTextImpl{codePosition=begin line/column 16/1; end line/column 16/3, textBuffer=And so it ends.}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 16/11; end line/column 16/15, textBuffer=}}}}}}}}";
        assertEquals(reference, probe);
    }

    @Test
    public void testFiles() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("Files"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 5/1; end line/column 5/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 5/1; end line/column 5/4, head=FixedTextImpl{codePosition=begin line/column 5/1; end line/column 5/4, textBuffer=Here are scecret agents for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/4; end line/column 6/38, head=IncludeBausteinStatement{codePosition=begin line/column 6/4; end line/column 6/38, pathToBaustein='\"/some/fake/path/Declarations.clou\"', content='null'}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/4; end line/column 7/26, head=OpenFileCommand{codePosition=begin line/column 7/4; end line/column 7/26, fileName='$SHELLVARIABLE(\"datei\")'}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/4; end line/column 8/33, head=IncludeBausteinStatement{codePosition=begin line/column 8/4; end line/column 8/33, pathToBaustein='\"/some/fake/path//Header.clou\"', content='null'}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/4; end line/column 9/26, head=CloseFileCommand{codePosition=begin line/column 9/4; end line/column 9/26, fileName='$SHELLVARIABLE(\"datei\")'}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/1; end line/column 10/3, head=FixedTextImpl{codePosition=begin line/column 10/1; end line/column 10/3, textBuffer=How do you like this?}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 10/17; end line/column 10/21, textBuffer=}}}}}}}}}", probe);
    }

    @Test
    public void testAssignments() throws Exception {
        parser = new HitAssAstParser(TestUtils.getClouBausteinAsInputStream("Files"), "UTF-8");
        baustein = parser.CB();
        baustein.accept(merger);
        assertNotNull(baustein);
        String probe = baustein.toString();
//        assertEquals("ClouBausteinImpl{codePosition=begin line/column 5/1; end line/column 5/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 5/1; end line/column 5/4, head=FixedTextImpl{codePosition=begin line/column 5/1; end line/column 5/4, textBuffer=Here are scecret agents for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/4; end line/column 6/37, head=IncludeBausteinStatement{codePosition=begin line/column 6/4; end line/column 6/37, pathToBaustein='\"/home/assentis/Declarations.clou\"'}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/4; end line/column 7/26, head=OpenFileCommand{codePosition=begin line/column 7/4; end line/column 7/26, fileName='$SHELLVARIABLE(\"datei\")'}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/4; end line/column 8/31, head=IncludeBausteinStatement{codePosition=begin line/column 8/4; end line/column 8/31, pathToBaustein='\"/home/assentis/Header.clou\"'}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/4; end line/column 9/26, head=CloseFileCommand{codePosition=begin line/column 9/4; end line/column 9/26, fileName='$SHELLVARIABLE(\"datei\")'}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/1; end line/column 10/3, head=FixedTextImpl{codePosition=begin line/column 10/1; end line/column 10/3, textBuffer=How do you like this?}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 10/17; end line/column 10/21, textBuffer=}}}}}}}}}", probe);
        assertEquals("ClouBausteinImpl{codePosition=begin line/column 5/1; end line/column 5/4, clouBausteinElement=PairClouBausteinElementList{codePosition=begin line/column 5/1; end line/column 5/4, head=FixedTextImpl{codePosition=begin line/column 5/1; end line/column 5/4, textBuffer=Here are scecret agents for you.}, tail=PairClouBausteinElementList{codePosition=begin line/column 6/4; end line/column 6/38, head=IncludeBausteinStatement{codePosition=begin line/column 6/4; end line/column 6/38, pathToBaustein='\"/some/fake/path/Declarations.clou\"', content='null'}, tail=PairClouBausteinElementList{codePosition=begin line/column 7/4; end line/column 7/26, head=OpenFileCommand{codePosition=begin line/column 7/4; end line/column 7/26, fileName='$SHELLVARIABLE(\"datei\")'}, tail=PairClouBausteinElementList{codePosition=begin line/column 8/4; end line/column 8/33, head=IncludeBausteinStatement{codePosition=begin line/column 8/4; end line/column 8/33, pathToBaustein='\"/some/fake/path//Header.clou\"', content='null'}, tail=PairClouBausteinElementList{codePosition=begin line/column 9/4; end line/column 9/26, head=CloseFileCommand{codePosition=begin line/column 9/4; end line/column 9/26, fileName='$SHELLVARIABLE(\"datei\")'}, tail=PairClouBausteinElementList{codePosition=begin line/column 10/1; end line/column 10/3, head=FixedTextImpl{codePosition=begin line/column 10/1; end line/column 10/3, textBuffer=How do you like this?}, tail=LastClouBausteinElementList{head=FixedTextImpl{codePosition=begin line/column 10/17; end line/column 10/21, textBuffer=}}}}}}}}}", probe);
    }

}